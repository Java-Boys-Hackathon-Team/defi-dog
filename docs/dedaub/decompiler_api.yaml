openapi: 3.0.2
info:
  title: Contract Library Rest API
  version: 1.0.0
servers:
  - url: https://api.dedaub.com
paths:
  /api/on_demand/decompilation/{md5}:
    get:
      tags:
        - decompiler_api
      summary: Fetch output from Decompiler
      description: Returns the decompiled code from the decompiler.
      operationId: get_decompilation
      parameters:
        - required: true
          schema:
            title: Md5
            pattern: ^(0x)?[0-9A-Fa-f]{32}$
            type: string
          example: '0x28e065e594ff5114e20d4fa6fd280d5f'
          name: md5
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Decompilation'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2AuthorizationCodeBearer: []
        - APIKeyHeader: []
  /api/on_demand/{md5}/status:
    get:
      tags:
        - decompiler_api
      summary: Query status of decompilation
      description: >-
        The `CIStage` indicates the progress of your decompilation, with five
        return responses.
                The statuses `ANALYSIS_STARTED` and `ANALYSIS_ENDED` are only applicable if you're using
                the static analysis pipeline. Note that all results are uploaded together; thus, even if
                your status changes from `DECOMPILATION_STARTED` to `ANALYSIS_STARTED`, the decompilation
                result won't be uploaded until the pipeline returns `COMPLETED`.
      operationId: get_on_demand_analysis_status
      parameters:
        - required: true
          schema:
            title: Md5
            pattern: ^(0x)?[0-9A-Fa-f]{32}$
            type: string
          example: '0x28e065e594ff5114e20d4fa6fd280d5f'
          name: md5
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CIStage'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2AuthorizationCodeBearer: []
        - APIKeyHeader: []
  /api/on_demand:
    post:
      tags:
        - decompiler_api
      summary: Submit bytecode for decompilation
      description: >-
        Upload the hex representation of your bytecode for scheduling
        decompilation.
                Identify your decompilation job using the returned hex string, which is an MD5
                hash of the uploaded bytecode in binary format.
      operationId: decompile
      requestBody:
        content:
          application/json:
            schema:
              title: Hex Bytecode
              pattern: ^(0x)?[0-9A-Fa-f]*$
              type: string
            example: >-
              0x6060604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100b9578063095ea7b31461014757806318160ddd146101a157806323b872dd146101ca5780632e1a7d4d14610243578063313ce5671461026657806370a082311461029557806395d89b41146102e2578063a9059cbb14610370578063d0e30db0146103ca578063dd62ed3e146103d4575b6100b7610440565b005b34156100c457600080fd5b6100cc6104dd565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561010c5780820151818401526020810190506100f1565b50505050905090810190601f1680156101395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015257600080fd5b610187600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061057b565b604051808215151515815260200191505060405180910390f35b34156101ac57600080fd5b6101b461066d565b6040518082815260200191505060405180910390f35b34156101d557600080fd5b610229600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061068c565b604051808215151515815260200191505060405180910390f35b341561024e57600080fd5b61026460048080359060200190919050506109d9565b005b341561027157600080fd5b610279610b05565b604051808260ff1660ff16815260200191505060405180910390f35b34156102a057600080fd5b6102cc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b18565b6040518082815260200191505060405180910390f35b34156102ed57600080fd5b6102f5610b30565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561033557808201518184015260208101905061031a565b50505050905090810190601f1680156103625780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561037b57600080fd5b6103b0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610bce565b604051808215151515815260200191505060405180910390f35b6103d2610440565b005b34156103df57600080fd5b61042a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610be3565b6040518082815260200191505060405180910390f35b34600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c346040518082815260200191505060405180910390a2565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105735780601f1061054857610100808354040283529160200191610573565b820191906000526020600020905b81548152906001019060200180831161055657829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b600081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156106dc57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141580156107b457507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b156108cf5781600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561084457600080fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610a2757600080fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515610ab457600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65826040518082815260200191505060405180910390a250565b600260009054906101000a900460ff1681565b60036020528060005260406000206000915090505481565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bc65780601f10610b9b57610100808354040283529160200191610bc6565b820191906000526020600020905b815481529060010190602001808311610ba957829003601f168201915b505050505081565b6000610bdb33848461068c565b905092915050565b60046020528160005260406000206020528060005260406000206000915091505054815600a165627a7a72305820deb4c2ccab3c2fdca32ab3f46728389c2fe2c165d5fafa07661e4e004f6c344a0029
        required: true
      responses:
        '200':
          description: Successfully submitted bytecode for decompilation
          content:
            application/json:
              schema:
                title: Response Decompile
                pattern: ^(0x)?[0-9A-Fa-f]{32}$
                type: string
              example: '0x28e065e594ff5114e20d4fa6fd280d5f'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2AuthorizationCodeBearer: []
        - APIKeyHeader: []
components:
  schemas:
    CIStage:
      title: CIStage
      enum:
        - UNKNOWN
        - SCHEDULED
        - DECOMPILATION_STARTED
        - ANALYSIS_STARTED
        - ANALYSIS_ENDED
        - COMPLETED
      type: string
      description: An enumeration.
    Decompilation:
      title: Decompilation
      required:
        - md5
        - bytecode
        - disassembled
        - tac
        - yul
        - source
      type: object
      properties:
        md5:
          title: Md5
          pattern: ^(0x)?[0-9A-Fa-f]{32}$
          type: string
          example: '0x28e065e594ff5114e20d4fa6fd280d5f'
        bytecode:
          title: Bytecode
          type: string
          example: >-
            0x6060604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100b9578063095ea7b31461014757806318160ddd146101a157806323b872dd146101ca5780632e1a7d4d14610243578063313ce5671461026657806370a082311461029557806395d89b41146102e2578063a9059cbb14610370578063d0e30db0146103ca578063dd62ed3e146103d4575b6100b7610440565b005b34156100c457600080fd5b6100cc6104dd565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561010c5780820151818401526020810190506100f1565b50505050905090810190601f1680156101395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015257600080fd5b610187600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061057b565b604051808215151515815260200191505060405180910390f35b34156101ac57600080fd5b6101b461066d565b6040518082815260200191505060405180910390f35b34156101d557600080fd5b610229600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061068c565b604051808215151515815260200191505060405180910390f35b341561024e57600080fd5b61026460048080359060200190919050506109d9565b005b341561027157600080fd5b610279610b05565b604051808260ff1660ff16815260200191505060405180910390f35b34156102a057600080fd5b6102cc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b18565b6040518082815260200191505060405180910390f35b34156102ed57600080fd5b6102f5610b30565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561033557808201518184015260208101905061031a565b50505050905090810190601f1680156103625780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561037b57600080fd5b6103b0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610bce565b604051808215151515815260200191505060405180910390f35b6103d2610440565b005b34156103df57600080fd5b61042a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610be3565b6040518082815260200191505060405180910390f35b34600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c346040518082815260200191505060405180910390a2565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105735780601f1061054857610100808354040283529160200191610573565b820191906000526020600020905b81548152906001019060200180831161055657829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b600081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156106dc57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141580156107b457507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b156108cf5781600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561084457600080fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610a2757600080fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515610ab457600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65826040518082815260200191505060405180910390a250565b600260009054906101000a900460ff1681565b60036020528060005260406000206000915090505481565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bc65780601f10610b9b57610100808354040283529160200191610bc6565b820191906000526020600020905b815481529060010190602001808311610ba957829003601f168201915b505050505081565b6000610bdb33848461068c565b905092915050565b60046020528160005260406000206020528060005260406000206000915091505054815600a165627a7a72305820deb4c2ccab3c2fdca32ab3f46728389c2fe2c165d5fafa07661e4e004f6c344a0029
        disassembled:
          title: Disassembled
          type: string
          example: |2-
                0x0: PUSH1     0x60
                0x2: PUSH1     0x40
                0x4: MSTORE    
                0x5: PUSH1     0x4
                0x7: CALLDATASIZE
                0x8: LT        
                0x9: PUSH2     0xaf
                0xc: JUMPI     
                0xd: PUSH1     0x0
                0xf: CALLDATALOAD
               0x10: PUSH29    0x100000000000000000000000000000000000000000000000000000000
               0x2e: SWAP1     
               0x2f: DIV       
               0x30: PUSH4     0xffffffff
               0x35: AND       
               0x36: DUP1      
               0x37: PUSH4     0x6fdde03
               0x3c: EQ        
               0x3d: PUSH2     0xb9
               0x40: JUMPI     
               0x41: DUP1      
               0x42: PUSH4     0x95ea7b3
               0x47: EQ        
               0x48: PUSH2     0x147
               0x4b: JUMPI     
               0x4c: DUP1      
               0x4d: PUSH4     0x18160ddd
               0x52: EQ        
               0x53: PUSH2     0x1a1
               0x56: JUMPI     
               0x57: DUP1      
               0x58: PUSH4     0x23b872dd
               0x5d: EQ        
               0x5e: PUSH2     0x1ca
               0x61: JUMPI     
               0x62: DUP1      
               0x63: PUSH4     0x2e1a7d4d
               0x68: EQ        
               0x69: PUSH2     0x243
               0x6c: JUMPI     
               0x6d: DUP1      
               0x6e: PUSH4     0x313ce567
               0x73: EQ        
               0x74: PUSH2     0x266
               0x77: JUMPI     
               0x78: DUP1      
               0x79: PUSH4     0x70a08231
               0x7e: EQ        
               0x7f: PUSH2     0x295
               0x82: JUMPI     
               0x83: DUP1      
               0x84: PUSH4     0x95d89b41
               0x89: EQ        
               0x8a: PUSH2     0x2e2
               0x8d: JUMPI     
               0x8e: DUP1      
               0x8f: PUSH4     0xa9059cbb
               0x94: EQ        
               0x95: PUSH2     0x370
               0x98: JUMPI     
               0x99: DUP1      
               0x9a: PUSH4     0xd0e30db0
               0x9f: EQ        
               0xa0: PUSH2     0x3ca
               0xa3: JUMPI     
               0xa4: DUP1      
               0xa5: PUSH4     0xdd62ed3e
               0xaa: EQ        
               0xab: PUSH2     0x3d4
               0xae: JUMPI     
               0xaf: JUMPDEST  
               0xb0: PUSH2     0xb7
               0xb3: PUSH2     0x440
               0xb6: JUMP      
               0xb7: JUMPDEST  
               0xb8: STOP      
               0xb9: JUMPDEST  
               0xba: CALLVALUE 
               0xbb: ISZERO    
               0xbc: PUSH2     0xc4
               0xbf: JUMPI     
               0xc0: PUSH1     0x0
               0xc2: DUP1      
               0xc3: REVERT    
               0xc4: JUMPDEST  
               0xc5: PUSH2     0xcc
               0xc8: PUSH2     0x4dd
               0xcb: JUMP      
               0xcc: JUMPDEST  
               0xcd: PUSH1     0x40
               0xcf: MLOAD     
               0xd0: DUP1      
               0xd1: DUP1      
               0xd2: PUSH1     0x20
               0xd4: ADD       
               0xd5: DUP3      
               0xd6: DUP2      
               0xd7: SUB       
               0xd8: DUP3      
               0xd9: MSTORE    
               0xda: DUP4      
               0xdb: DUP2      
               0xdc: DUP2      
               0xdd: MLOAD     
               0xde: DUP2      
               0xdf: MSTORE    
               0xe0: PUSH1     0x20
               0xe2: ADD       
               0xe3: SWAP2     
               0xe4: POP       
               0xe5: DUP1      
               0xe6: MLOAD     
               0xe7: SWAP1     
               0xe8: PUSH1     0x20
               0xea: ADD       
               0xeb: SWAP1     
               0xec: DUP1      
               0xed: DUP4      
               0xee: DUP4      
               0xef: PUSH1     0x0
               0xf1: JUMPDEST  
               0xf2: DUP4      
               0xf3: DUP2      
               0xf4: LT        
               0xf5: ISZERO    
               0xf6: PUSH2     0x10c
               0xf9: JUMPI     
               0xfa: DUP1      
               0xfb: DUP3      
               0xfc: ADD       
               0xfd: MLOAD     
               0xfe: DUP2      
               0xff: DUP5      
              0x100: ADD       
              0x101: MSTORE    
              0x102: PUSH1     0x20
              0x104: DUP2      
              0x105: ADD       
              0x106: SWAP1     
              0x107: POP       
              0x108: PUSH2     0xf1
              0x10b: JUMP      
              0x10c: JUMPDEST  
              0x10d: POP       
              0x10e: POP       
              0x10f: POP       
              0x110: POP       
              0x111: SWAP1     
              0x112: POP       
              0x113: SWAP1     
              0x114: DUP2      
              0x115: ADD       
              0x116: SWAP1     
              0x117: PUSH1     0x1f
              0x119: AND       
              0x11a: DUP1      
              0x11b: ISZERO    
              0x11c: PUSH2     0x139
              0x11f: JUMPI     
              0x120: DUP1      
              0x121: DUP3      
              0x122: SUB       
              0x123: DUP1      
              0x124: MLOAD     
              0x125: PUSH1     0x1
              0x127: DUP4      
              0x128: PUSH1     0x20
              0x12a: SUB       
              0x12b: PUSH2     0x100
              0x12e: EXP       
              0x12f: SUB       
              0x130: NOT       
              0x131: AND       
              0x132: DUP2      
              0x133: MSTORE    
              0x134: PUSH1     0x20
              0x136: ADD       
              0x137: SWAP2     
              0x138: POP       
              0x139: JUMPDEST  
              0x13a: POP       
              0x13b: SWAP3     
              0x13c: POP       
              0x13d: POP       
              0x13e: POP       
              0x13f: PUSH1     0x40
              0x141: MLOAD     
              0x142: DUP1      
              0x143: SWAP2     
              0x144: SUB       
              0x145: SWAP1     
              0x146: RETURN    
              0x147: JUMPDEST  
              0x148: CALLVALUE 
              0x149: ISZERO    
              0x14a: PUSH2     0x152
              0x14d: JUMPI     
              0x14e: PUSH1     0x0
              0x150: DUP1      
              0x151: REVERT    
              0x152: JUMPDEST  
              0x153: PUSH2     0x187
              0x156: PUSH1     0x4
              0x158: DUP1      
              0x159: DUP1      
              0x15a: CALLDATALOAD
              0x15b: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x170: AND       
              0x171: SWAP1     
              0x172: PUSH1     0x20
              0x174: ADD       
              0x175: SWAP1     
              0x176: SWAP2     
              0x177: SWAP1     
              0x178: DUP1      
              0x179: CALLDATALOAD
              0x17a: SWAP1     
              0x17b: PUSH1     0x20
              0x17d: ADD       
              0x17e: SWAP1     
              0x17f: SWAP2     
              0x180: SWAP1     
              0x181: POP       
              0x182: POP       
              0x183: PUSH2     0x57b
              0x186: JUMP      
              0x187: JUMPDEST  
              0x188: PUSH1     0x40
              0x18a: MLOAD     
              0x18b: DUP1      
              0x18c: DUP3      
              0x18d: ISZERO    
              0x18e: ISZERO    
              0x18f: ISZERO    
              0x190: ISZERO    
              0x191: DUP2      
              0x192: MSTORE    
              0x193: PUSH1     0x20
              0x195: ADD       
              0x196: SWAP2     
              0x197: POP       
              0x198: POP       
              0x199: PUSH1     0x40
              0x19b: MLOAD     
              0x19c: DUP1      
              0x19d: SWAP2     
              0x19e: SUB       
              0x19f: SWAP1     
              0x1a0: RETURN    
              0x1a1: JUMPDEST  
              0x1a2: CALLVALUE 
              0x1a3: ISZERO    
              0x1a4: PUSH2     0x1ac
              0x1a7: JUMPI     
              0x1a8: PUSH1     0x0
              0x1aa: DUP1      
              0x1ab: REVERT    
              0x1ac: JUMPDEST  
              0x1ad: PUSH2     0x1b4
              0x1b0: PUSH2     0x66d
              0x1b3: JUMP      
              0x1b4: JUMPDEST  
              0x1b5: PUSH1     0x40
              0x1b7: MLOAD     
              0x1b8: DUP1      
              0x1b9: DUP3      
              0x1ba: DUP2      
              0x1bb: MSTORE    
              0x1bc: PUSH1     0x20
              0x1be: ADD       
              0x1bf: SWAP2     
              0x1c0: POP       
              0x1c1: POP       
              0x1c2: PUSH1     0x40
              0x1c4: MLOAD     
              0x1c5: DUP1      
              0x1c6: SWAP2     
              0x1c7: SUB       
              0x1c8: SWAP1     
              0x1c9: RETURN    
              0x1ca: JUMPDEST  
              0x1cb: CALLVALUE 
              0x1cc: ISZERO    
              0x1cd: PUSH2     0x1d5
              0x1d0: JUMPI     
              0x1d1: PUSH1     0x0
              0x1d3: DUP1      
              0x1d4: REVERT    
              0x1d5: JUMPDEST  
              0x1d6: PUSH2     0x229
              0x1d9: PUSH1     0x4
              0x1db: DUP1      
              0x1dc: DUP1      
              0x1dd: CALLDATALOAD
              0x1de: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x1f3: AND       
              0x1f4: SWAP1     
              0x1f5: PUSH1     0x20
              0x1f7: ADD       
              0x1f8: SWAP1     
              0x1f9: SWAP2     
              0x1fa: SWAP1     
              0x1fb: DUP1      
              0x1fc: CALLDATALOAD
              0x1fd: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x212: AND       
              0x213: SWAP1     
              0x214: PUSH1     0x20
              0x216: ADD       
              0x217: SWAP1     
              0x218: SWAP2     
              0x219: SWAP1     
              0x21a: DUP1      
              0x21b: CALLDATALOAD
              0x21c: SWAP1     
              0x21d: PUSH1     0x20
              0x21f: ADD       
              0x220: SWAP1     
              0x221: SWAP2     
              0x222: SWAP1     
              0x223: POP       
              0x224: POP       
              0x225: PUSH2     0x68c
              0x228: JUMP      
              0x229: JUMPDEST  
              0x22a: PUSH1     0x40
              0x22c: MLOAD     
              0x22d: DUP1      
              0x22e: DUP3      
              0x22f: ISZERO    
              0x230: ISZERO    
              0x231: ISZERO    
              0x232: ISZERO    
              0x233: DUP2      
              0x234: MSTORE    
              0x235: PUSH1     0x20
              0x237: ADD       
              0x238: SWAP2     
              0x239: POP       
              0x23a: POP       
              0x23b: PUSH1     0x40
              0x23d: MLOAD     
              0x23e: DUP1      
              0x23f: SWAP2     
              0x240: SUB       
              0x241: SWAP1     
              0x242: RETURN    
              0x243: JUMPDEST  
              0x244: CALLVALUE 
              0x245: ISZERO    
              0x246: PUSH2     0x24e
              0x249: JUMPI     
              0x24a: PUSH1     0x0
              0x24c: DUP1      
              0x24d: REVERT    
              0x24e: JUMPDEST  
              0x24f: PUSH2     0x264
              0x252: PUSH1     0x4
              0x254: DUP1      
              0x255: DUP1      
              0x256: CALLDATALOAD
              0x257: SWAP1     
              0x258: PUSH1     0x20
              0x25a: ADD       
              0x25b: SWAP1     
              0x25c: SWAP2     
              0x25d: SWAP1     
              0x25e: POP       
              0x25f: POP       
              0x260: PUSH2     0x9d9
              0x263: JUMP      
              0x264: JUMPDEST  
              0x265: STOP      
              0x266: JUMPDEST  
              0x267: CALLVALUE 
              0x268: ISZERO    
              0x269: PUSH2     0x271
              0x26c: JUMPI     
              0x26d: PUSH1     0x0
              0x26f: DUP1      
              0x270: REVERT    
              0x271: JUMPDEST  
              0x272: PUSH2     0x279
              0x275: PUSH2     0xb05
              0x278: JUMP      
              0x279: JUMPDEST  
              0x27a: PUSH1     0x40
              0x27c: MLOAD     
              0x27d: DUP1      
              0x27e: DUP3      
              0x27f: PUSH1     0xff
              0x281: AND       
              0x282: PUSH1     0xff
              0x284: AND       
              0x285: DUP2      
              0x286: MSTORE    
              0x287: PUSH1     0x20
              0x289: ADD       
              0x28a: SWAP2     
              0x28b: POP       
              0x28c: POP       
              0x28d: PUSH1     0x40
              0x28f: MLOAD     
              0x290: DUP1      
              0x291: SWAP2     
              0x292: SUB       
              0x293: SWAP1     
              0x294: RETURN    
              0x295: JUMPDEST  
              0x296: CALLVALUE 
              0x297: ISZERO    
              0x298: PUSH2     0x2a0
              0x29b: JUMPI     
              0x29c: PUSH1     0x0
              0x29e: DUP1      
              0x29f: REVERT    
              0x2a0: JUMPDEST  
              0x2a1: PUSH2     0x2cc
              0x2a4: PUSH1     0x4
              0x2a6: DUP1      
              0x2a7: DUP1      
              0x2a8: CALLDATALOAD
              0x2a9: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x2be: AND       
              0x2bf: SWAP1     
              0x2c0: PUSH1     0x20
              0x2c2: ADD       
              0x2c3: SWAP1     
              0x2c4: SWAP2     
              0x2c5: SWAP1     
              0x2c6: POP       
              0x2c7: POP       
              0x2c8: PUSH2     0xb18
              0x2cb: JUMP      
              0x2cc: JUMPDEST  
              0x2cd: PUSH1     0x40
              0x2cf: MLOAD     
              0x2d0: DUP1      
              0x2d1: DUP3      
              0x2d2: DUP2      
              0x2d3: MSTORE    
              0x2d4: PUSH1     0x20
              0x2d6: ADD       
              0x2d7: SWAP2     
              0x2d8: POP       
              0x2d9: POP       
              0x2da: PUSH1     0x40
              0x2dc: MLOAD     
              0x2dd: DUP1      
              0x2de: SWAP2     
              0x2df: SUB       
              0x2e0: SWAP1     
              0x2e1: RETURN    
              0x2e2: JUMPDEST  
              0x2e3: CALLVALUE 
              0x2e4: ISZERO    
              0x2e5: PUSH2     0x2ed
              0x2e8: JUMPI     
              0x2e9: PUSH1     0x0
              0x2eb: DUP1      
              0x2ec: REVERT    
              0x2ed: JUMPDEST  
              0x2ee: PUSH2     0x2f5
              0x2f1: PUSH2     0xb30
              0x2f4: JUMP      
              0x2f5: JUMPDEST  
              0x2f6: PUSH1     0x40
              0x2f8: MLOAD     
              0x2f9: DUP1      
              0x2fa: DUP1      
              0x2fb: PUSH1     0x20
              0x2fd: ADD       
              0x2fe: DUP3      
              0x2ff: DUP2      
              0x300: SUB       
              0x301: DUP3      
              0x302: MSTORE    
              0x303: DUP4      
              0x304: DUP2      
              0x305: DUP2      
              0x306: MLOAD     
              0x307: DUP2      
              0x308: MSTORE    
              0x309: PUSH1     0x20
              0x30b: ADD       
              0x30c: SWAP2     
              0x30d: POP       
              0x30e: DUP1      
              0x30f: MLOAD     
              0x310: SWAP1     
              0x311: PUSH1     0x20
              0x313: ADD       
              0x314: SWAP1     
              0x315: DUP1      
              0x316: DUP4      
              0x317: DUP4      
              0x318: PUSH1     0x0
              0x31a: JUMPDEST  
              0x31b: DUP4      
              0x31c: DUP2      
              0x31d: LT        
              0x31e: ISZERO    
              0x31f: PUSH2     0x335
              0x322: JUMPI     
              0x323: DUP1      
              0x324: DUP3      
              0x325: ADD       
              0x326: MLOAD     
              0x327: DUP2      
              0x328: DUP5      
              0x329: ADD       
              0x32a: MSTORE    
              0x32b: PUSH1     0x20
              0x32d: DUP2      
              0x32e: ADD       
              0x32f: SWAP1     
              0x330: POP       
              0x331: PUSH2     0x31a
              0x334: JUMP      
              0x335: JUMPDEST  
              0x336: POP       
              0x337: POP       
              0x338: POP       
              0x339: POP       
              0x33a: SWAP1     
              0x33b: POP       
              0x33c: SWAP1     
              0x33d: DUP2      
              0x33e: ADD       
              0x33f: SWAP1     
              0x340: PUSH1     0x1f
              0x342: AND       
              0x343: DUP1      
              0x344: ISZERO    
              0x345: PUSH2     0x362
              0x348: JUMPI     
              0x349: DUP1      
              0x34a: DUP3      
              0x34b: SUB       
              0x34c: DUP1      
              0x34d: MLOAD     
              0x34e: PUSH1     0x1
              0x350: DUP4      
              0x351: PUSH1     0x20
              0x353: SUB       
              0x354: PUSH2     0x100
              0x357: EXP       
              0x358: SUB       
              0x359: NOT       
              0x35a: AND       
              0x35b: DUP2      
              0x35c: MSTORE    
              0x35d: PUSH1     0x20
              0x35f: ADD       
              0x360: SWAP2     
              0x361: POP       
              0x362: JUMPDEST  
              0x363: POP       
              0x364: SWAP3     
              0x365: POP       
              0x366: POP       
              0x367: POP       
              0x368: PUSH1     0x40
              0x36a: MLOAD     
              0x36b: DUP1      
              0x36c: SWAP2     
              0x36d: SUB       
              0x36e: SWAP1     
              0x36f: RETURN    
              0x370: JUMPDEST  
              0x371: CALLVALUE 
              0x372: ISZERO    
              0x373: PUSH2     0x37b
              0x376: JUMPI     
              0x377: PUSH1     0x0
              0x379: DUP1      
              0x37a: REVERT    
              0x37b: JUMPDEST  
              0x37c: PUSH2     0x3b0
              0x37f: PUSH1     0x4
              0x381: DUP1      
              0x382: DUP1      
              0x383: CALLDATALOAD
              0x384: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x399: AND       
              0x39a: SWAP1     
              0x39b: PUSH1     0x20
              0x39d: ADD       
              0x39e: SWAP1     
              0x39f: SWAP2     
              0x3a0: SWAP1     
              0x3a1: DUP1      
              0x3a2: CALLDATALOAD
              0x3a3: SWAP1     
              0x3a4: PUSH1     0x20
              0x3a6: ADD       
              0x3a7: SWAP1     
              0x3a8: SWAP2     
              0x3a9: SWAP1     
              0x3aa: POP       
              0x3ab: POP       
              0x3ac: PUSH2     0xbce
              0x3af: JUMP      
              0x3b0: JUMPDEST  
              0x3b1: PUSH1     0x40
              0x3b3: MLOAD     
              0x3b4: DUP1      
              0x3b5: DUP3      
              0x3b6: ISZERO    
              0x3b7: ISZERO    
              0x3b8: ISZERO    
              0x3b9: ISZERO    
              0x3ba: DUP2      
              0x3bb: MSTORE    
              0x3bc: PUSH1     0x20
              0x3be: ADD       
              0x3bf: SWAP2     
              0x3c0: POP       
              0x3c1: POP       
              0x3c2: PUSH1     0x40
              0x3c4: MLOAD     
              0x3c5: DUP1      
              0x3c6: SWAP2     
              0x3c7: SUB       
              0x3c8: SWAP1     
              0x3c9: RETURN    
              0x3ca: JUMPDEST  
              0x3cb: PUSH2     0x3d2
              0x3ce: PUSH2     0x440
              0x3d1: JUMP      
              0x3d2: JUMPDEST  
              0x3d3: STOP      
              0x3d4: JUMPDEST  
              0x3d5: CALLVALUE 
              0x3d6: ISZERO    
              0x3d7: PUSH2     0x3df
              0x3da: JUMPI     
              0x3db: PUSH1     0x0
              0x3dd: DUP1      
              0x3de: REVERT    
              0x3df: JUMPDEST  
              0x3e0: PUSH2     0x42a
              0x3e3: PUSH1     0x4
              0x3e5: DUP1      
              0x3e6: DUP1      
              0x3e7: CALLDATALOAD
              0x3e8: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x3fd: AND       
              0x3fe: SWAP1     
              0x3ff: PUSH1     0x20
              0x401: ADD       
              0x402: SWAP1     
              0x403: SWAP2     
              0x404: SWAP1     
              0x405: DUP1      
              0x406: CALLDATALOAD
              0x407: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x41c: AND       
              0x41d: SWAP1     
              0x41e: PUSH1     0x20
              0x420: ADD       
              0x421: SWAP1     
              0x422: SWAP2     
              0x423: SWAP1     
              0x424: POP       
              0x425: POP       
              0x426: PUSH2     0xbe3
              0x429: JUMP      
              0x42a: JUMPDEST  
              0x42b: PUSH1     0x40
              0x42d: MLOAD     
              0x42e: DUP1      
              0x42f: DUP3      
              0x430: DUP2      
              0x431: MSTORE    
              0x432: PUSH1     0x20
              0x434: ADD       
              0x435: SWAP2     
              0x436: POP       
              0x437: POP       
              0x438: PUSH1     0x40
              0x43a: MLOAD     
              0x43b: DUP1      
              0x43c: SWAP2     
              0x43d: SUB       
              0x43e: SWAP1     
              0x43f: RETURN    
              0x440: JUMPDEST  
              0x441: CALLVALUE 
              0x442: PUSH1     0x3
              0x444: PUSH1     0x0
              0x446: CALLER    
              0x447: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x45c: AND       
              0x45d: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x472: AND       
              0x473: DUP2      
              0x474: MSTORE    
              0x475: PUSH1     0x20
              0x477: ADD       
              0x478: SWAP1     
              0x479: DUP2      
              0x47a: MSTORE    
              0x47b: PUSH1     0x20
              0x47d: ADD       
              0x47e: PUSH1     0x0
              0x480: SHA3      
              0x481: PUSH1     0x0
              0x483: DUP3      
              0x484: DUP3      
              0x485: SLOAD     
              0x486: ADD       
              0x487: SWAP3     
              0x488: POP       
              0x489: POP       
              0x48a: DUP2      
              0x48b: SWAP1     
              0x48c: SSTORE    
              0x48d: POP       
              0x48e: CALLER    
              0x48f: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x4a4: AND       
              0x4a5: PUSH32    0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c
              0x4c6: CALLVALUE 
              0x4c7: PUSH1     0x40
              0x4c9: MLOAD     
              0x4ca: DUP1      
              0x4cb: DUP3      
              0x4cc: DUP2      
              0x4cd: MSTORE    
              0x4ce: PUSH1     0x20
              0x4d0: ADD       
              0x4d1: SWAP2     
              0x4d2: POP       
              0x4d3: POP       
              0x4d4: PUSH1     0x40
              0x4d6: MLOAD     
              0x4d7: DUP1      
              0x4d8: SWAP2     
              0x4d9: SUB       
              0x4da: SWAP1     
              0x4db: LOG2      
              0x4dc: JUMP      
              0x4dd: JUMPDEST  
              0x4de: PUSH1     0x0
              0x4e0: DUP1      
              0x4e1: SLOAD     
              0x4e2: PUSH1     0x1
              0x4e4: DUP2      
              0x4e5: PUSH1     0x1
              0x4e7: AND       
              0x4e8: ISZERO    
              0x4e9: PUSH2     0x100
              0x4ec: MUL       
              0x4ed: SUB       
              0x4ee: AND       
              0x4ef: PUSH1     0x2
              0x4f1: SWAP1     
              0x4f2: DIV       
              0x4f3: DUP1      
              0x4f4: PUSH1     0x1f
              0x4f6: ADD       
              0x4f7: PUSH1     0x20
              0x4f9: DUP1      
              0x4fa: SWAP2     
              0x4fb: DIV       
              0x4fc: MUL       
              0x4fd: PUSH1     0x20
              0x4ff: ADD       
              0x500: PUSH1     0x40
              0x502: MLOAD     
              0x503: SWAP1     
              0x504: DUP2      
              0x505: ADD       
              0x506: PUSH1     0x40
              0x508: MSTORE    
              0x509: DUP1      
              0x50a: SWAP3     
              0x50b: SWAP2     
              0x50c: SWAP1     
              0x50d: DUP2      
              0x50e: DUP2      
              0x50f: MSTORE    
              0x510: PUSH1     0x20
              0x512: ADD       
              0x513: DUP3      
              0x514: DUP1      
              0x515: SLOAD     
              0x516: PUSH1     0x1
              0x518: DUP2      
              0x519: PUSH1     0x1
              0x51b: AND       
              0x51c: ISZERO    
              0x51d: PUSH2     0x100
              0x520: MUL       
              0x521: SUB       
              0x522: AND       
              0x523: PUSH1     0x2
              0x525: SWAP1     
              0x526: DIV       
              0x527: DUP1      
              0x528: ISZERO    
              0x529: PUSH2     0x573
              0x52c: JUMPI     
              0x52d: DUP1      
              0x52e: PUSH1     0x1f
              0x530: LT        
              0x531: PUSH2     0x548
              0x534: JUMPI     
              0x535: PUSH2     0x100
              0x538: DUP1      
              0x539: DUP4      
              0x53a: SLOAD     
              0x53b: DIV       
              0x53c: MUL       
              0x53d: DUP4      
              0x53e: MSTORE    
              0x53f: SWAP2     
              0x540: PUSH1     0x20
              0x542: ADD       
              0x543: SWAP2     
              0x544: PUSH2     0x573
              0x547: JUMP      
              0x548: JUMPDEST  
              0x549: DUP3      
              0x54a: ADD       
              0x54b: SWAP2     
              0x54c: SWAP1     
              0x54d: PUSH1     0x0
              0x54f: MSTORE    
              0x550: PUSH1     0x20
              0x552: PUSH1     0x0
              0x554: SHA3      
              0x555: SWAP1     
              0x556: JUMPDEST  
              0x557: DUP2      
              0x558: SLOAD     
              0x559: DUP2      
              0x55a: MSTORE    
              0x55b: SWAP1     
              0x55c: PUSH1     0x1
              0x55e: ADD       
              0x55f: SWAP1     
              0x560: PUSH1     0x20
              0x562: ADD       
              0x563: DUP1      
              0x564: DUP4      
              0x565: GT        
              0x566: PUSH2     0x556
              0x569: JUMPI     
              0x56a: DUP3      
              0x56b: SWAP1     
              0x56c: SUB       
              0x56d: PUSH1     0x1f
              0x56f: AND       
              0x570: DUP3      
              0x571: ADD       
              0x572: SWAP2     
              0x573: JUMPDEST  
              0x574: POP       
              0x575: POP       
              0x576: POP       
              0x577: POP       
              0x578: POP       
              0x579: DUP2      
              0x57a: JUMP      
              0x57b: JUMPDEST  
              0x57c: PUSH1     0x0
              0x57e: DUP2      
              0x57f: PUSH1     0x4
              0x581: PUSH1     0x0
              0x583: CALLER    
              0x584: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x599: AND       
              0x59a: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x5af: AND       
              0x5b0: DUP2      
              0x5b1: MSTORE    
              0x5b2: PUSH1     0x20
              0x5b4: ADD       
              0x5b5: SWAP1     
              0x5b6: DUP2      
              0x5b7: MSTORE    
              0x5b8: PUSH1     0x20
              0x5ba: ADD       
              0x5bb: PUSH1     0x0
              0x5bd: SHA3      
              0x5be: PUSH1     0x0
              0x5c0: DUP6      
              0x5c1: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x5d6: AND       
              0x5d7: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x5ec: AND       
              0x5ed: DUP2      
              0x5ee: MSTORE    
              0x5ef: PUSH1     0x20
              0x5f1: ADD       
              0x5f2: SWAP1     
              0x5f3: DUP2      
              0x5f4: MSTORE    
              0x5f5: PUSH1     0x20
              0x5f7: ADD       
              0x5f8: PUSH1     0x0
              0x5fa: SHA3      
              0x5fb: DUP2      
              0x5fc: SWAP1     
              0x5fd: SSTORE    
              0x5fe: POP       
              0x5ff: DUP3      
              0x600: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x615: AND       
              0x616: CALLER    
              0x617: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x62c: AND       
              0x62d: PUSH32    0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925
              0x64e: DUP5      
              0x64f: PUSH1     0x40
              0x651: MLOAD     
              0x652: DUP1      
              0x653: DUP3      
              0x654: DUP2      
              0x655: MSTORE    
              0x656: PUSH1     0x20
              0x658: ADD       
              0x659: SWAP2     
              0x65a: POP       
              0x65b: POP       
              0x65c: PUSH1     0x40
              0x65e: MLOAD     
              0x65f: DUP1      
              0x660: SWAP2     
              0x661: SUB       
              0x662: SWAP1     
              0x663: LOG3      
              0x664: PUSH1     0x1
              0x666: SWAP1     
              0x667: POP       
              0x668: SWAP3     
              0x669: SWAP2     
              0x66a: POP       
              0x66b: POP       
              0x66c: JUMP      
              0x66d: JUMPDEST  
              0x66e: PUSH1     0x0
              0x670: ADDRESS   
              0x671: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x686: AND       
              0x687: BALANCE   
              0x688: SWAP1     
              0x689: POP       
              0x68a: SWAP1     
              0x68b: JUMP      
              0x68c: JUMPDEST  
              0x68d: PUSH1     0x0
              0x68f: DUP2      
              0x690: PUSH1     0x3
              0x692: PUSH1     0x0
              0x694: DUP7      
              0x695: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x6aa: AND       
              0x6ab: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x6c0: AND       
              0x6c1: DUP2      
              0x6c2: MSTORE    
              0x6c3: PUSH1     0x20
              0x6c5: ADD       
              0x6c6: SWAP1     
              0x6c7: DUP2      
              0x6c8: MSTORE    
              0x6c9: PUSH1     0x20
              0x6cb: ADD       
              0x6cc: PUSH1     0x0
              0x6ce: SHA3      
              0x6cf: SLOAD     
              0x6d0: LT        
              0x6d1: ISZERO    
              0x6d2: ISZERO    
              0x6d3: ISZERO    
              0x6d4: PUSH2     0x6dc
              0x6d7: JUMPI     
              0x6d8: PUSH1     0x0
              0x6da: DUP1      
              0x6db: REVERT    
              0x6dc: JUMPDEST  
              0x6dd: CALLER    
              0x6de: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x6f3: AND       
              0x6f4: DUP5      
              0x6f5: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x70a: AND       
              0x70b: EQ        
              0x70c: ISZERO    
              0x70d: DUP1      
              0x70e: ISZERO    
              0x70f: PUSH2     0x7b4
              0x712: JUMPI     
              0x713: POP       
              0x714: PUSH32    0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
              0x735: PUSH1     0x4
              0x737: PUSH1     0x0
              0x739: DUP7      
              0x73a: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x74f: AND       
              0x750: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x765: AND       
              0x766: DUP2      
              0x767: MSTORE    
              0x768: PUSH1     0x20
              0x76a: ADD       
              0x76b: SWAP1     
              0x76c: DUP2      
              0x76d: MSTORE    
              0x76e: PUSH1     0x20
              0x770: ADD       
              0x771: PUSH1     0x0
              0x773: SHA3      
              0x774: PUSH1     0x0
              0x776: CALLER    
              0x777: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x78c: AND       
              0x78d: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x7a2: AND       
              0x7a3: DUP2      
              0x7a4: MSTORE    
              0x7a5: PUSH1     0x20
              0x7a7: ADD       
              0x7a8: SWAP1     
              0x7a9: DUP2      
              0x7aa: MSTORE    
              0x7ab: PUSH1     0x20
              0x7ad: ADD       
              0x7ae: PUSH1     0x0
              0x7b0: SHA3      
              0x7b1: SLOAD     
              0x7b2: EQ        
              0x7b3: ISZERO    
              0x7b4: JUMPDEST  
              0x7b5: ISZERO    
              0x7b6: PUSH2     0x8cf
              0x7b9: JUMPI     
              0x7ba: DUP2      
              0x7bb: PUSH1     0x4
              0x7bd: PUSH1     0x0
              0x7bf: DUP7      
              0x7c0: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x7d5: AND       
              0x7d6: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x7eb: AND       
              0x7ec: DUP2      
              0x7ed: MSTORE    
              0x7ee: PUSH1     0x20
              0x7f0: ADD       
              0x7f1: SWAP1     
              0x7f2: DUP2      
              0x7f3: MSTORE    
              0x7f4: PUSH1     0x20
              0x7f6: ADD       
              0x7f7: PUSH1     0x0
              0x7f9: SHA3      
              0x7fa: PUSH1     0x0
              0x7fc: CALLER    
              0x7fd: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x812: AND       
              0x813: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x828: AND       
              0x829: DUP2      
              0x82a: MSTORE    
              0x82b: PUSH1     0x20
              0x82d: ADD       
              0x82e: SWAP1     
              0x82f: DUP2      
              0x830: MSTORE    
              0x831: PUSH1     0x20
              0x833: ADD       
              0x834: PUSH1     0x0
              0x836: SHA3      
              0x837: SLOAD     
              0x838: LT        
              0x839: ISZERO    
              0x83a: ISZERO    
              0x83b: ISZERO    
              0x83c: PUSH2     0x844
              0x83f: JUMPI     
              0x840: PUSH1     0x0
              0x842: DUP1      
              0x843: REVERT    
              0x844: JUMPDEST  
              0x845: DUP2      
              0x846: PUSH1     0x4
              0x848: PUSH1     0x0
              0x84a: DUP7      
              0x84b: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x860: AND       
              0x861: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x876: AND       
              0x877: DUP2      
              0x878: MSTORE    
              0x879: PUSH1     0x20
              0x87b: ADD       
              0x87c: SWAP1     
              0x87d: DUP2      
              0x87e: MSTORE    
              0x87f: PUSH1     0x20
              0x881: ADD       
              0x882: PUSH1     0x0
              0x884: SHA3      
              0x885: PUSH1     0x0
              0x887: CALLER    
              0x888: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x89d: AND       
              0x89e: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x8b3: AND       
              0x8b4: DUP2      
              0x8b5: MSTORE    
              0x8b6: PUSH1     0x20
              0x8b8: ADD       
              0x8b9: SWAP1     
              0x8ba: DUP2      
              0x8bb: MSTORE    
              0x8bc: PUSH1     0x20
              0x8be: ADD       
              0x8bf: PUSH1     0x0
              0x8c1: SHA3      
              0x8c2: PUSH1     0x0
              0x8c4: DUP3      
              0x8c5: DUP3      
              0x8c6: SLOAD     
              0x8c7: SUB       
              0x8c8: SWAP3     
              0x8c9: POP       
              0x8ca: POP       
              0x8cb: DUP2      
              0x8cc: SWAP1     
              0x8cd: SSTORE    
              0x8ce: POP       
              0x8cf: JUMPDEST  
              0x8d0: DUP2      
              0x8d1: PUSH1     0x3
              0x8d3: PUSH1     0x0
              0x8d5: DUP7      
              0x8d6: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x8eb: AND       
              0x8ec: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x901: AND       
              0x902: DUP2      
              0x903: MSTORE    
              0x904: PUSH1     0x20
              0x906: ADD       
              0x907: SWAP1     
              0x908: DUP2      
              0x909: MSTORE    
              0x90a: PUSH1     0x20
              0x90c: ADD       
              0x90d: PUSH1     0x0
              0x90f: SHA3      
              0x910: PUSH1     0x0
              0x912: DUP3      
              0x913: DUP3      
              0x914: SLOAD     
              0x915: SUB       
              0x916: SWAP3     
              0x917: POP       
              0x918: POP       
              0x919: DUP2      
              0x91a: SWAP1     
              0x91b: SSTORE    
              0x91c: POP       
              0x91d: DUP2      
              0x91e: PUSH1     0x3
              0x920: PUSH1     0x0
              0x922: DUP6      
              0x923: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x938: AND       
              0x939: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x94e: AND       
              0x94f: DUP2      
              0x950: MSTORE    
              0x951: PUSH1     0x20
              0x953: ADD       
              0x954: SWAP1     
              0x955: DUP2      
              0x956: MSTORE    
              0x957: PUSH1     0x20
              0x959: ADD       
              0x95a: PUSH1     0x0
              0x95c: SHA3      
              0x95d: PUSH1     0x0
              0x95f: DUP3      
              0x960: DUP3      
              0x961: SLOAD     
              0x962: ADD       
              0x963: SWAP3     
              0x964: POP       
              0x965: POP       
              0x966: DUP2      
              0x967: SWAP1     
              0x968: SSTORE    
              0x969: POP       
              0x96a: DUP3      
              0x96b: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x980: AND       
              0x981: DUP5      
              0x982: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x997: AND       
              0x998: PUSH32    0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
              0x9b9: DUP5      
              0x9ba: PUSH1     0x40
              0x9bc: MLOAD     
              0x9bd: DUP1      
              0x9be: DUP3      
              0x9bf: DUP2      
              0x9c0: MSTORE    
              0x9c1: PUSH1     0x20
              0x9c3: ADD       
              0x9c4: SWAP2     
              0x9c5: POP       
              0x9c6: POP       
              0x9c7: PUSH1     0x40
              0x9c9: MLOAD     
              0x9ca: DUP1      
              0x9cb: SWAP2     
              0x9cc: SUB       
              0x9cd: SWAP1     
              0x9ce: LOG3      
              0x9cf: PUSH1     0x1
              0x9d1: SWAP1     
              0x9d2: POP       
              0x9d3: SWAP4     
              0x9d4: SWAP3     
              0x9d5: POP       
              0x9d6: POP       
              0x9d7: POP       
              0x9d8: JUMP      
              0x9d9: JUMPDEST  
              0x9da: DUP1      
              0x9db: PUSH1     0x3
              0x9dd: PUSH1     0x0
              0x9df: CALLER    
              0x9e0: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0x9f5: AND       
              0x9f6: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0xa0b: AND       
              0xa0c: DUP2      
              0xa0d: MSTORE    
              0xa0e: PUSH1     0x20
              0xa10: ADD       
              0xa11: SWAP1     
              0xa12: DUP2      
              0xa13: MSTORE    
              0xa14: PUSH1     0x20
              0xa16: ADD       
              0xa17: PUSH1     0x0
              0xa19: SHA3      
              0xa1a: SLOAD     
              0xa1b: LT        
              0xa1c: ISZERO    
              0xa1d: ISZERO    
              0xa1e: ISZERO    
              0xa1f: PUSH2     0xa27
              0xa22: JUMPI     
              0xa23: PUSH1     0x0
              0xa25: DUP1      
              0xa26: REVERT    
              0xa27: JUMPDEST  
              0xa28: DUP1      
              0xa29: PUSH1     0x3
              0xa2b: PUSH1     0x0
              0xa2d: CALLER    
              0xa2e: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0xa43: AND       
              0xa44: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0xa59: AND       
              0xa5a: DUP2      
              0xa5b: MSTORE    
              0xa5c: PUSH1     0x20
              0xa5e: ADD       
              0xa5f: SWAP1     
              0xa60: DUP2      
              0xa61: MSTORE    
              0xa62: PUSH1     0x20
              0xa64: ADD       
              0xa65: PUSH1     0x0
              0xa67: SHA3      
              0xa68: PUSH1     0x0
              0xa6a: DUP3      
              0xa6b: DUP3      
              0xa6c: SLOAD     
              0xa6d: SUB       
              0xa6e: SWAP3     
              0xa6f: POP       
              0xa70: POP       
              0xa71: DUP2      
              0xa72: SWAP1     
              0xa73: SSTORE    
              0xa74: POP       
              0xa75: CALLER    
              0xa76: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0xa8b: AND       
              0xa8c: PUSH2     0x8fc
              0xa8f: DUP3      
              0xa90: SWAP1     
              0xa91: DUP2      
              0xa92: ISZERO    
              0xa93: MUL       
              0xa94: SWAP1     
              0xa95: PUSH1     0x40
              0xa97: MLOAD     
              0xa98: PUSH1     0x0
              0xa9a: PUSH1     0x40
              0xa9c: MLOAD     
              0xa9d: DUP1      
              0xa9e: DUP4      
              0xa9f: SUB       
              0xaa0: DUP2      
              0xaa1: DUP6      
              0xaa2: DUP9      
              0xaa3: DUP9      
              0xaa4: CALL      
              0xaa5: SWAP4     
              0xaa6: POP       
              0xaa7: POP       
              0xaa8: POP       
              0xaa9: POP       
              0xaaa: ISZERO    
              0xaab: ISZERO    
              0xaac: PUSH2     0xab4
              0xaaf: JUMPI     
              0xab0: PUSH1     0x0
              0xab2: DUP1      
              0xab3: REVERT    
              0xab4: JUMPDEST  
              0xab5: CALLER    
              0xab6: PUSH20    0xffffffffffffffffffffffffffffffffffffffff
              0xacb: AND       
              0xacc: PUSH32    0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65
              0xaed: DUP3      
              0xaee: PUSH1     0x40
              0xaf0: MLOAD     
              0xaf1: DUP1      
              0xaf2: DUP3      
              0xaf3: DUP2      
              0xaf4: MSTORE    
              0xaf5: PUSH1     0x20
              0xaf7: ADD       
              0xaf8: SWAP2     
              0xaf9: POP       
              0xafa: POP       
              0xafb: PUSH1     0x40
              0xafd: MLOAD     
              0xafe: DUP1      
              0xaff: SWAP2     
              0xb00: SUB       
              0xb01: SWAP1     
              0xb02: LOG2      
              0xb03: POP       
              0xb04: JUMP      
              0xb05: JUMPDEST  
              0xb06: PUSH1     0x2
              0xb08: PUSH1     0x0
              0xb0a: SWAP1     
              0xb0b: SLOAD     
              0xb0c: SWAP1     
              0xb0d: PUSH2     0x100
              0xb10: EXP       
              0xb11: SWAP1     
              0xb12: DIV       
              0xb13: PUSH1     0xff
              0xb15: AND       
              0xb16: DUP2      
              0xb17: JUMP      
              0xb18: JUMPDEST  
              0xb19: PUSH1     0x3
              0xb1b: PUSH1     0x20
              0xb1d: MSTORE    
              0xb1e: DUP1      
              0xb1f: PUSH1     0x0
              0xb21: MSTORE    
              0xb22: PUSH1     0x40
              0xb24: PUSH1     0x0
              0xb26: SHA3      
              0xb27: PUSH1     0x0
              0xb29: SWAP2     
              0xb2a: POP       
              0xb2b: SWAP1     
              0xb2c: POP       
              0xb2d: SLOAD     
              0xb2e: DUP2      
              0xb2f: JUMP      
              0xb30: JUMPDEST  
              0xb31: PUSH1     0x1
              0xb33: DUP1      
              0xb34: SLOAD     
              0xb35: PUSH1     0x1
              0xb37: DUP2      
              0xb38: PUSH1     0x1
              0xb3a: AND       
              0xb3b: ISZERO    
              0xb3c: PUSH2     0x100
              0xb3f: MUL       
              0xb40: SUB       
              0xb41: AND       
              0xb42: PUSH1     0x2
              0xb44: SWAP1     
              0xb45: DIV       
              0xb46: DUP1      
              0xb47: PUSH1     0x1f
              0xb49: ADD       
              0xb4a: PUSH1     0x20
              0xb4c: DUP1      
              0xb4d: SWAP2     
              0xb4e: DIV       
              0xb4f: MUL       
              0xb50: PUSH1     0x20
              0xb52: ADD       
              0xb53: PUSH1     0x40
              0xb55: MLOAD     
              0xb56: SWAP1     
              0xb57: DUP2      
              0xb58: ADD       
              0xb59: PUSH1     0x40
              0xb5b: MSTORE    
              0xb5c: DUP1      
              0xb5d: SWAP3     
              0xb5e: SWAP2     
              0xb5f: SWAP1     
              0xb60: DUP2      
              0xb61: DUP2      
              0xb62: MSTORE    
              0xb63: PUSH1     0x20
              0xb65: ADD       
              0xb66: DUP3      
              0xb67: DUP1      
              0xb68: SLOAD     
              0xb69: PUSH1     0x1
              0xb6b: DUP2      
              0xb6c: PUSH1     0x1
              0xb6e: AND       
              0xb6f: ISZERO    
              0xb70: PUSH2     0x100
              0xb73: MUL       
              0xb74: SUB       
              0xb75: AND       
              0xb76: PUSH1     0x2
              0xb78: SWAP1     
              0xb79: DIV       
              0xb7a: DUP1      
              0xb7b: ISZERO    
              0xb7c: PUSH2     0xbc6
              0xb7f: JUMPI     
              0xb80: DUP1      
              0xb81: PUSH1     0x1f
              0xb83: LT        
              0xb84: PUSH2     0xb9b
              0xb87: JUMPI     
              0xb88: PUSH2     0x100
              0xb8b: DUP1      
              0xb8c: DUP4      
              0xb8d: SLOAD     
              0xb8e: DIV       
              0xb8f: MUL       
              0xb90: DUP4      
              0xb91: MSTORE    
              0xb92: SWAP2     
              0xb93: PUSH1     0x20
              0xb95: ADD       
              0xb96: SWAP2     
              0xb97: PUSH2     0xbc6
              0xb9a: JUMP      
              0xb9b: JUMPDEST  
              0xb9c: DUP3      
              0xb9d: ADD       
              0xb9e: SWAP2     
              0xb9f: SWAP1     
              0xba0: PUSH1     0x0
              0xba2: MSTORE    
              0xba3: PUSH1     0x20
              0xba5: PUSH1     0x0
              0xba7: SHA3      
              0xba8: SWAP1     
              0xba9: JUMPDEST  
              0xbaa: DUP2      
              0xbab: SLOAD     
              0xbac: DUP2      
              0xbad: MSTORE    
              0xbae: SWAP1     
              0xbaf: PUSH1     0x1
              0xbb1: ADD       
              0xbb2: SWAP1     
              0xbb3: PUSH1     0x20
              0xbb5: ADD       
              0xbb6: DUP1      
              0xbb7: DUP4      
              0xbb8: GT        
              0xbb9: PUSH2     0xba9
              0xbbc: JUMPI     
              0xbbd: DUP3      
              0xbbe: SWAP1     
              0xbbf: SUB       
              0xbc0: PUSH1     0x1f
              0xbc2: AND       
              0xbc3: DUP3      
              0xbc4: ADD       
              0xbc5: SWAP2     
              0xbc6: JUMPDEST  
              0xbc7: POP       
              0xbc8: POP       
              0xbc9: POP       
              0xbca: POP       
              0xbcb: POP       
              0xbcc: DUP2      
              0xbcd: JUMP      
              0xbce: JUMPDEST  
              0xbcf: PUSH1     0x0
              0xbd1: PUSH2     0xbdb
              0xbd4: CALLER    
              0xbd5: DUP5      
              0xbd6: DUP5      
              0xbd7: PUSH2     0x68c
              0xbda: JUMP      
              0xbdb: JUMPDEST  
              0xbdc: SWAP1     
              0xbdd: POP       
              0xbde: SWAP3     
              0xbdf: SWAP2     
              0xbe0: POP       
              0xbe1: POP       
              0xbe2: JUMP      
              0xbe3: JUMPDEST  
              0xbe4: PUSH1     0x4
              0xbe6: PUSH1     0x20
              0xbe8: MSTORE    
              0xbe9: DUP2      
              0xbea: PUSH1     0x0
              0xbec: MSTORE    
              0xbed: PUSH1     0x40
              0xbef: PUSH1     0x0
              0xbf1: SHA3      
              0xbf2: PUSH1     0x20
              0xbf4: MSTORE    
              0xbf5: DUP1      
              0xbf6: PUSH1     0x0
              0xbf8: MSTORE    
              0xbf9: PUSH1     0x40
              0xbfb: PUSH1     0x0
              0xbfd: SHA3      
              0xbfe: PUSH1     0x0
              0xc00: SWAP2     
              0xc01: POP       
              0xc02: SWAP2     
              0xc03: POP       
              0xc04: POP       
              0xc05: SLOAD     
              0xc06: DUP2      
              0xc07: JUMP      
              0xc08: STOP      
              0xc09: LOG1      
              0xc0a: PUSH6     0x627a7a723058
              0xc11: SHA3      
              0xc12: MISSING   
              0xc13: MISSING   
              0xc14: MISSING   
              0xc15: MISSING   
              0xc16: MISSING   
              0xc17: EXTCODECOPY
              0xc18: MISSING   
              0xc19: MISSING   
              0xc1a: LOG3      
              0xc1b: MISSING   
              0xc1c: MISSING   
              0xc1d: DELEGATECALL
              0xc1e: PUSH8     0x28389c2fe2c165d5
              0xc27: STATICCALL
              0xc28: STATICCALL
              0xc29: SMOD      
              0xc2a: PUSH7     0x1e4e004f6c344a
              0xc32: STOP      
              0xc33: MISSING   
        tac:
          title: Tac
          type: string
          example: >+
            function __function_selector__() public {
                Begin block 0x0
                prev=[], succ=[0xd, 0xce8]
                =================================
                0x0: v0(0x60) = CONST 
                0x2: v2(0x40) = CONST 
                0x4: MSTORE v2(0x40), v0(0x60)
                0x5: v5(0x4) = CONST 
                0x7: v7 = CALLDATASIZE 
                0x8: v8 = LT v7, v5(0x4)
                0xcd0: vcd0(0xce8) = CONST 
                0xcd1: JUMPI vcd0(0xce8), v8

                Begin block 0xd
                prev=[0x0], succ=[0xceb, 0x41]
                =================================
                0xd: vd(0x0) = CONST 
                0xf: vf = CALLDATALOAD vd(0x0)
                0x10: v10(0x100000000000000000000000000000000000000000000000000000000) = CONST 
                0x2f: v2f = DIV vf, v10(0x100000000000000000000000000000000000000000000000000000000)
                0x30: v30(0xffffffff) = CONST 
                0x35: v35 = AND v30(0xffffffff), v2f
                0x37: v37(0x6fdde03) = CONST 
                0x3c: v3c = EQ v37(0x6fdde03), v35
                0xcd2: vcd2(0xceb) = CONST 
                0xcd3: JUMPI vcd2(0xceb), v3c

                Begin block 0xceb
                prev=[0xd], succ=[]
                =================================
                0xcec: vcec(0xb9) = CONST 
                0xced: CALLPRIVATE vcec(0xb9)

                Begin block 0x41
                prev=[0xd], succ=[0xcee, 0x4c]
                =================================
                0x42: v42(0x95ea7b3) = CONST 
                0x47: v47 = EQ v42(0x95ea7b3), v35
                0xcd4: vcd4(0xcee) = CONST 
                0xcd5: JUMPI vcd4(0xcee), v47

                Begin block 0xcee
                prev=[0x41], succ=[]
                =================================
                0xcef: vcef(0x147) = CONST 
                0xcf0: CALLPRIVATE vcef(0x147)

                Begin block 0x4c
                prev=[0x41], succ=[0xcf1, 0x57]
                =================================
                0x4d: v4d(0x18160ddd) = CONST 
                0x52: v52 = EQ v4d(0x18160ddd), v35
                0xcd6: vcd6(0xcf1) = CONST 
                0xcd7: JUMPI vcd6(0xcf1), v52

                Begin block 0xcf1
                prev=[0x4c], succ=[]
                =================================
                0xcf2: vcf2(0x1a1) = CONST 
                0xcf3: CALLPRIVATE vcf2(0x1a1)

                Begin block 0x57
                prev=[0x4c], succ=[0xcf4, 0x62]
                =================================
                0x58: v58(0x23b872dd) = CONST 
                0x5d: v5d = EQ v58(0x23b872dd), v35
                0xcd8: vcd8(0xcf4) = CONST 
                0xcd9: JUMPI vcd8(0xcf4), v5d

                Begin block 0xcf4
                prev=[0x57], succ=[]
                =================================
                0xcf5: vcf5(0x1ca) = CONST 
                0xcf6: CALLPRIVATE vcf5(0x1ca)

                Begin block 0x62
                prev=[0x57], succ=[0xcf7, 0x6d]
                =================================
                0x63: v63(0x2e1a7d4d) = CONST 
                0x68: v68 = EQ v63(0x2e1a7d4d), v35
                0xcda: vcda(0xcf7) = CONST 
                0xcdb: JUMPI vcda(0xcf7), v68

                Begin block 0xcf7
                prev=[0x62], succ=[]
                =================================
                0xcf8: vcf8(0x243) = CONST 
                0xcf9: CALLPRIVATE vcf8(0x243)

                Begin block 0x6d
                prev=[0x62], succ=[0xcfa, 0x78]
                =================================
                0x6e: v6e(0x313ce567) = CONST 
                0x73: v73 = EQ v6e(0x313ce567), v35
                0xcdc: vcdc(0xcfa) = CONST 
                0xcdd: JUMPI vcdc(0xcfa), v73

                Begin block 0xcfa
                prev=[0x6d], succ=[]
                =================================
                0xcfb: vcfb(0x266) = CONST 
                0xcfc: CALLPRIVATE vcfb(0x266)

                Begin block 0x78
                prev=[0x6d], succ=[0xcfd, 0x83]
                =================================
                0x79: v79(0x70a08231) = CONST 
                0x7e: v7e = EQ v79(0x70a08231), v35
                0xcde: vcde(0xcfd) = CONST 
                0xcdf: JUMPI vcde(0xcfd), v7e

                Begin block 0xcfd
                prev=[0x78], succ=[]
                =================================
                0xcfe: vcfe(0x295) = CONST 
                0xcff: CALLPRIVATE vcfe(0x295)

                Begin block 0x83
                prev=[0x78], succ=[0xd00, 0x8e]
                =================================
                0x84: v84(0x95d89b41) = CONST 
                0x89: v89 = EQ v84(0x95d89b41), v35
                0xce0: vce0(0xd00) = CONST 
                0xce1: JUMPI vce0(0xd00), v89

                Begin block 0xd00
                prev=[0x83], succ=[]
                =================================
                0xd01: vd01(0x2e2) = CONST 
                0xd02: CALLPRIVATE vd01(0x2e2)

                Begin block 0x8e
                prev=[0x83], succ=[0xd03, 0x99]
                =================================
                0x8f: v8f(0xa9059cbb) = CONST 
                0x94: v94 = EQ v8f(0xa9059cbb), v35
                0xce2: vce2(0xd03) = CONST 
                0xce3: JUMPI vce2(0xd03), v94

                Begin block 0xd03
                prev=[0x8e], succ=[]
                =================================
                0xd04: vd04(0x370) = CONST 
                0xd05: CALLPRIVATE vd04(0x370)

                Begin block 0x99
                prev=[0x8e], succ=[0xd06, 0xa4]
                =================================
                0x9a: v9a(0xd0e30db0) = CONST 
                0x9f: v9f = EQ v9a(0xd0e30db0), v35
                0xce4: vce4(0xd06) = CONST 
                0xce5: JUMPI vce4(0xd06), v9f

                Begin block 0xd06
                prev=[0x99], succ=[]
                =================================
                0xd07: vd07(0x3ca) = CONST 
                0xd08: CALLPRIVATE vd07(0x3ca)

                Begin block 0xa4
                prev=[0x99], succ=[0xce8, 0xd09]
                =================================
                0xa5: va5(0xdd62ed3e) = CONST 
                0xaa: vaa = EQ va5(0xdd62ed3e), v35
                0xce6: vce6(0xd09) = CONST 
                0xce7: JUMPI vce6(0xd09), vaa

                Begin block 0xce8
                prev=[0x0, 0xa4], succ=[]
                =================================
                0xce9: vce9(0xaf) = CONST 
                0xcea: CALLPRIVATE vce9(0xaf)

                Begin block 0xd09
                prev=[0xa4], succ=[]
                =================================
                0xd0a: vd0a(0x3d4) = CONST 
                0xd0b: CALLPRIVATE vd0a(0x3d4)

            }


            function approve(address,uint256)() public {
                Begin block 0x147
                prev=[], succ=[0x14e, 0x152]
                =================================
                0x148: v148 = CALLVALUE 
                0x149: v149 = ISZERO v148
                0x14a: v14a(0x152) = CONST 
                0x14d: JUMPI v14a(0x152), v149

                Begin block 0x14e
                prev=[0x147], succ=[]
                =================================
                0x14e: v14e(0x0) = CONST 
                0x151: REVERT v14e(0x0), v14e(0x0)

                Begin block 0x152
                prev=[0x147], succ=[0x57b]
                =================================
                0x153: v153(0x187) = CONST 
                0x156: v156(0x4) = CONST 
                0x15a: v15a = CALLDATALOAD v156(0x4)
                0x15b: v15b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x170: v170 = AND v15b(0xffffffffffffffffffffffffffffffffffffffff), v15a
                0x172: v172(0x20) = CONST 
                0x174: v174(0x24) = ADD v172(0x20), v156(0x4)
                0x179: v179 = CALLDATALOAD v174(0x24)
                0x17b: v17b(0x20) = CONST 
                0x17d: v17d(0x44) = ADD v17b(0x20), v174(0x24)
                0x183: v183(0x57b) = CONST 
                0x186: JUMP v183(0x57b)

                Begin block 0x57b
                prev=[0x152], succ=[0x187]
                =================================
                0x57c: v57c(0x0) = CONST 
                0x57f: v57f(0x4) = CONST 
                0x581: v581(0x0) = CONST 
                0x583: v583 = CALLER 
                0x584: v584(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x599: v599 = AND v584(0xffffffffffffffffffffffffffffffffffffffff), v583
                0x59a: v59a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x5af: v5af = AND v59a(0xffffffffffffffffffffffffffffffffffffffff), v599
                0x5b1: MSTORE v581(0x0), v5af
                0x5b2: v5b2(0x20) = CONST 
                0x5b4: v5b4(0x20) = ADD v5b2(0x20), v581(0x0)
                0x5b7: MSTORE v5b4(0x20), v57f(0x4)
                0x5b8: v5b8(0x20) = CONST 
                0x5ba: v5ba(0x40) = ADD v5b8(0x20), v5b4(0x20)
                0x5bb: v5bb(0x0) = CONST 
                0x5bd: v5bd = SHA3 v5bb(0x0), v5ba(0x40)
                0x5be: v5be(0x0) = CONST 
                0x5c1: v5c1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x5d6: v5d6 = AND v5c1(0xffffffffffffffffffffffffffffffffffffffff), v170
                0x5d7: v5d7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x5ec: v5ec = AND v5d7(0xffffffffffffffffffffffffffffffffffffffff), v5d6
                0x5ee: MSTORE v5be(0x0), v5ec
                0x5ef: v5ef(0x20) = CONST 
                0x5f1: v5f1(0x20) = ADD v5ef(0x20), v5be(0x0)
                0x5f4: MSTORE v5f1(0x20), v5bd
                0x5f5: v5f5(0x20) = CONST 
                0x5f7: v5f7(0x40) = ADD v5f5(0x20), v5f1(0x20)
                0x5f8: v5f8(0x0) = CONST 
                0x5fa: v5fa = SHA3 v5f8(0x0), v5f7(0x40)
                0x5fd: SSTORE v5fa, v179
                0x600: v600(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x615: v615 = AND v600(0xffffffffffffffffffffffffffffffffffffffff), v170
                0x616: v616 = CALLER 
                0x617: v617(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x62c: v62c = AND v617(0xffffffffffffffffffffffffffffffffffffffff), v616
                0x62d: v62d(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
                0x64f: v64f(0x40) = CONST 
                0x651: v651 = MLOAD v64f(0x40)
                0x655: MSTORE v651, v179
                0x656: v656(0x20) = CONST 
                0x658: v658 = ADD v656(0x20), v651
                0x65c: v65c(0x40) = CONST 
                0x65e: v65e = MLOAD v65c(0x40)
                0x661: v661(0x20) = SUB v658, v65e
                0x663: LOG3 v65e, v661(0x20), v62d(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925), v62c, v615
                0x664: v664(0x1) = CONST 
                0x66c: JUMP v153(0x187)

                Begin block 0x187
                prev=[0x57b], succ=[]
                =================================
                0x188: v188(0x40) = CONST 
                0x18a: v18a = MLOAD v188(0x40)
                0x18d: v18d = ISZERO v664(0x1)
                0x18e: v18e = ISZERO v18d
                0x18f: v18f = ISZERO v18e
                0x190: v190 = ISZERO v18f
                0x192: MSTORE v18a, v190
                0x193: v193(0x20) = CONST 
                0x195: v195 = ADD v193(0x20), v18a
                0x199: v199(0x40) = CONST 
                0x19b: v19b = MLOAD v199(0x40)
                0x19e: v19e(0x20) = SUB v195, v19b
                0x1a0: RETURN v19b, v19e(0x20)

            }


            function totalSupply()() public {
                Begin block 0x1a1
                prev=[], succ=[0x1a8, 0x1ac]
                =================================
                0x1a2: v1a2 = CALLVALUE 
                0x1a3: v1a3 = ISZERO v1a2
                0x1a4: v1a4(0x1ac) = CONST 
                0x1a7: JUMPI v1a4(0x1ac), v1a3

                Begin block 0x1a8
                prev=[0x1a1], succ=[]
                =================================
                0x1a8: v1a8(0x0) = CONST 
                0x1ab: REVERT v1a8(0x0), v1a8(0x0)

                Begin block 0x1ac
                prev=[0x1a1], succ=[0x66d]
                =================================
                0x1ad: v1ad(0x1b4) = CONST 
                0x1b0: v1b0(0x66d) = CONST 
                0x1b3: JUMP v1b0(0x66d)

                Begin block 0x66d
                prev=[0x1ac], succ=[0x1b4]
                =================================
                0x66e: v66e(0x0) = CONST 
                0x670: v670 = ADDRESS 
                0x671: v671(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x686: v686 = AND v671(0xffffffffffffffffffffffffffffffffffffffff), v670
                0x687: v687 = BALANCE v686
                0x68b: JUMP v1ad(0x1b4)

                Begin block 0x1b4
                prev=[0x66d], succ=[]
                =================================
                0x1b5: v1b5(0x40) = CONST 
                0x1b7: v1b7 = MLOAD v1b5(0x40)
                0x1bb: MSTORE v1b7, v687
                0x1bc: v1bc(0x20) = CONST 
                0x1be: v1be = ADD v1bc(0x20), v1b7
                0x1c2: v1c2(0x40) = CONST 
                0x1c4: v1c4 = MLOAD v1c2(0x40)
                0x1c7: v1c7(0x20) = SUB v1be, v1c4
                0x1c9: RETURN v1c4, v1c7(0x20)

            }


            function transferFrom(address,address,uint256)() public {
                Begin block 0x1ca
                prev=[], succ=[0x1d1, 0x1d5]
                =================================
                0x1cb: v1cb = CALLVALUE 
                0x1cc: v1cc = ISZERO v1cb
                0x1cd: v1cd(0x1d5) = CONST 
                0x1d0: JUMPI v1cd(0x1d5), v1cc

                Begin block 0x1d1
                prev=[0x1ca], succ=[]
                =================================
                0x1d1: v1d1(0x0) = CONST 
                0x1d4: REVERT v1d1(0x0), v1d1(0x0)

                Begin block 0x1d5
                prev=[0x1ca], succ=[0x229]
                =================================
                0x1d6: v1d6(0x229) = CONST 
                0x1d9: v1d9(0x4) = CONST 
                0x1dd: v1dd = CALLDATALOAD v1d9(0x4)
                0x1de: v1de(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x1f3: v1f3 = AND v1de(0xffffffffffffffffffffffffffffffffffffffff), v1dd
                0x1f5: v1f5(0x20) = CONST 
                0x1f7: v1f7(0x24) = ADD v1f5(0x20), v1d9(0x4)
                0x1fc: v1fc = CALLDATALOAD v1f7(0x24)
                0x1fd: v1fd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x212: v212 = AND v1fd(0xffffffffffffffffffffffffffffffffffffffff), v1fc
                0x214: v214(0x20) = CONST 
                0x216: v216(0x44) = ADD v214(0x20), v1f7(0x24)
                0x21b: v21b = CALLDATALOAD v216(0x44)
                0x21d: v21d(0x20) = CONST 
                0x21f: v21f(0x64) = ADD v21d(0x20), v216(0x44)
                0x225: v225(0x68c) = CONST 
                0x228: v228_0 = CALLPRIVATE v225(0x68c), v21b, v212, v1f3, v1d6(0x229)

                Begin block 0x229
                prev=[0x1d5], succ=[]
                =================================
                0x22a: v22a(0x40) = CONST 
                0x22c: v22c = MLOAD v22a(0x40)
                0x22f: v22f = ISZERO v228_0
                0x230: v230 = ISZERO v22f
                0x231: v231 = ISZERO v230
                0x232: v232 = ISZERO v231
                0x234: MSTORE v22c, v232
                0x235: v235(0x20) = CONST 
                0x237: v237 = ADD v235(0x20), v22c
                0x23b: v23b(0x40) = CONST 
                0x23d: v23d = MLOAD v23b(0x40)
                0x240: v240(0x20) = SUB v237, v23d
                0x242: RETURN v23d, v240(0x20)

            }


            function withdraw(uint256)() public {
                Begin block 0x243
                prev=[], succ=[0x24a, 0x24e]
                =================================
                0x244: v244 = CALLVALUE 
                0x245: v245 = ISZERO v244
                0x246: v246(0x24e) = CONST 
                0x249: JUMPI v246(0x24e), v245

                Begin block 0x24a
                prev=[0x243], succ=[]
                =================================
                0x24a: v24a(0x0) = CONST 
                0x24d: REVERT v24a(0x0), v24a(0x0)

                Begin block 0x24e
                prev=[0x243], succ=[0x9d9]
                =================================
                0x24f: v24f(0x264) = CONST 
                0x252: v252(0x4) = CONST 
                0x256: v256 = CALLDATALOAD v252(0x4)
                0x258: v258(0x20) = CONST 
                0x25a: v25a(0x24) = ADD v258(0x20), v252(0x4)
                0x260: v260(0x9d9) = CONST 
                0x263: JUMP v260(0x9d9)

                Begin block 0x9d9
                prev=[0x24e], succ=[0xa23, 0xa27]
                =================================
                0x9db: v9db(0x3) = CONST 
                0x9dd: v9dd(0x0) = CONST 
                0x9df: v9df = CALLER 
                0x9e0: v9e0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x9f5: v9f5 = AND v9e0(0xffffffffffffffffffffffffffffffffffffffff), v9df
                0x9f6: v9f6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0xa0b: va0b = AND v9f6(0xffffffffffffffffffffffffffffffffffffffff), v9f5
                0xa0d: MSTORE v9dd(0x0), va0b
                0xa0e: va0e(0x20) = CONST 
                0xa10: va10(0x20) = ADD va0e(0x20), v9dd(0x0)
                0xa13: MSTORE va10(0x20), v9db(0x3)
                0xa14: va14(0x20) = CONST 
                0xa16: va16(0x40) = ADD va14(0x20), va10(0x20)
                0xa17: va17(0x0) = CONST 
                0xa19: va19 = SHA3 va17(0x0), va16(0x40)
                0xa1a: va1a = SLOAD va19
                0xa1b: va1b = LT va1a, v256
                0xa1c: va1c = ISZERO va1b
                0xa1d: va1d = ISZERO va1c
                0xa1e: va1e = ISZERO va1d
                0xa1f: va1f(0xa27) = CONST 
                0xa22: JUMPI va1f(0xa27), va1e

                Begin block 0xa23
                prev=[0x9d9], succ=[]
                =================================
                0xa23: va23(0x0) = CONST 
                0xa26: REVERT va23(0x0), va23(0x0)

                Begin block 0xa27
                prev=[0x9d9], succ=[0xab0, 0xab4]
                =================================
                0xa29: va29(0x3) = CONST 
                0xa2b: va2b(0x0) = CONST 
                0xa2d: va2d = CALLER 
                0xa2e: va2e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0xa43: va43 = AND va2e(0xffffffffffffffffffffffffffffffffffffffff), va2d
                0xa44: va44(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0xa59: va59 = AND va44(0xffffffffffffffffffffffffffffffffffffffff), va43
                0xa5b: MSTORE va2b(0x0), va59
                0xa5c: va5c(0x20) = CONST 
                0xa5e: va5e(0x20) = ADD va5c(0x20), va2b(0x0)
                0xa61: MSTORE va5e(0x20), va29(0x3)
                0xa62: va62(0x20) = CONST 
                0xa64: va64(0x40) = ADD va62(0x20), va5e(0x20)
                0xa65: va65(0x0) = CONST 
                0xa67: va67 = SHA3 va65(0x0), va64(0x40)
                0xa68: va68(0x0) = CONST 
                0xa6c: va6c = SLOAD va67
                0xa6d: va6d = SUB va6c, v256
                0xa73: SSTORE va67, va6d
                0xa75: va75 = CALLER 
                0xa76: va76(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0xa8b: va8b = AND va76(0xffffffffffffffffffffffffffffffffffffffff), va75
                0xa8c: va8c(0x8fc) = CONST 
                0xa92: va92 = ISZERO v256
                0xa93: va93 = MUL va92, va8c(0x8fc)
                0xa95: va95(0x40) = CONST 
                0xa97: va97 = MLOAD va95(0x40)
                0xa98: va98(0x0) = CONST 
                0xa9a: va9a(0x40) = CONST 
                0xa9c: va9c = MLOAD va9a(0x40)
                0xa9f: va9f(0x0) = SUB va97, va9c
                0xaa4: vaa4 = CALL va93, va8b, v256, va9c, va9f(0x0), va9c, va98(0x0)
                0xaaa: vaaa = ISZERO vaa4
                0xaab: vaab = ISZERO vaaa
                0xaac: vaac(0xab4) = CONST 
                0xaaf: JUMPI vaac(0xab4), vaab

                Begin block 0xab0
                prev=[0xa27], succ=[]
                =================================
                0xab0: vab0(0x0) = CONST 
                0xab3: REVERT vab0(0x0), vab0(0x0)

                Begin block 0xab4
                prev=[0xa27], succ=[0x264]
                =================================
                0xab5: vab5 = CALLER 
                0xab6: vab6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0xacb: vacb = AND vab6(0xffffffffffffffffffffffffffffffffffffffff), vab5
                0xacc: vacc(0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65) = CONST 
                0xaee: vaee(0x40) = CONST 
                0xaf0: vaf0 = MLOAD vaee(0x40)
                0xaf4: MSTORE vaf0, v256
                0xaf5: vaf5(0x20) = CONST 
                0xaf7: vaf7 = ADD vaf5(0x20), vaf0
                0xafb: vafb(0x40) = CONST 
                0xafd: vafd = MLOAD vafb(0x40)
                0xb00: vb00(0x20) = SUB vaf7, vafd
                0xb02: LOG2 vafd, vb00(0x20), vacc(0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65), vacb
                0xb04: JUMP v24f(0x264)

                Begin block 0x264
                prev=[0xab4], succ=[]
                =================================
                0x265: STOP 

            }


            function decimals()() public {
                Begin block 0x266
                prev=[], succ=[0x26d, 0x271]
                =================================
                0x267: v267 = CALLVALUE 
                0x268: v268 = ISZERO v267
                0x269: v269(0x271) = CONST 
                0x26c: JUMPI v269(0x271), v268

                Begin block 0x26d
                prev=[0x266], succ=[]
                =================================
                0x26d: v26d(0x0) = CONST 
                0x270: REVERT v26d(0x0), v26d(0x0)

                Begin block 0x271
                prev=[0x266], succ=[0xb05]
                =================================
                0x272: v272(0x279) = CONST 
                0x275: v275(0xb05) = CONST 
                0x278: JUMP v275(0xb05)

                Begin block 0xb05
                prev=[0x271], succ=[0x279]
                =================================
                0xb06: vb06(0x2) = CONST 
                0xb08: vb08(0x0) = CONST 
                0xb0b: vb0b = SLOAD vb06(0x2)
                0xb0d: vb0d(0x100) = CONST 
                0xb10: vb10(0x1) = EXP vb0d(0x100), vb08(0x0)
                0xb12: vb12 = DIV vb0b, vb10(0x1)
                0xb13: vb13(0xff) = CONST 
                0xb15: vb15 = AND vb13(0xff), vb12
                0xb17: JUMP v272(0x279)

                Begin block 0x279
                prev=[0xb05], succ=[]
                =================================
                0x27a: v27a(0x40) = CONST 
                0x27c: v27c = MLOAD v27a(0x40)
                0x27f: v27f(0xff) = CONST 
                0x281: v281 = AND v27f(0xff), vb15
                0x282: v282(0xff) = CONST 
                0x284: v284 = AND v282(0xff), v281
                0x286: MSTORE v27c, v284
                0x287: v287(0x20) = CONST 
                0x289: v289 = ADD v287(0x20), v27c
                0x28d: v28d(0x40) = CONST 
                0x28f: v28f = MLOAD v28d(0x40)
                0x292: v292(0x20) = SUB v289, v28f
                0x294: RETURN v28f, v292(0x20)

            }


            function balanceOf(address)() public {
                Begin block 0x295
                prev=[], succ=[0x29c, 0x2a0]
                =================================
                0x296: v296 = CALLVALUE 
                0x297: v297 = ISZERO v296
                0x298: v298(0x2a0) = CONST 
                0x29b: JUMPI v298(0x2a0), v297

                Begin block 0x29c
                prev=[0x295], succ=[]
                =================================
                0x29c: v29c(0x0) = CONST 
                0x29f: REVERT v29c(0x0), v29c(0x0)

                Begin block 0x2a0
                prev=[0x295], succ=[0xb18]
                =================================
                0x2a1: v2a1(0x2cc) = CONST 
                0x2a4: v2a4(0x4) = CONST 
                0x2a8: v2a8 = CALLDATALOAD v2a4(0x4)
                0x2a9: v2a9(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x2be: v2be = AND v2a9(0xffffffffffffffffffffffffffffffffffffffff), v2a8
                0x2c0: v2c0(0x20) = CONST 
                0x2c2: v2c2(0x24) = ADD v2c0(0x20), v2a4(0x4)
                0x2c8: v2c8(0xb18) = CONST 
                0x2cb: JUMP v2c8(0xb18)

                Begin block 0xb18
                prev=[0x2a0], succ=[0x2cc]
                =================================
                0xb19: vb19(0x3) = CONST 
                0xb1b: vb1b(0x20) = CONST 
                0xb1d: MSTORE vb1b(0x20), vb19(0x3)
                0xb1f: vb1f(0x0) = CONST 
                0xb21: MSTORE vb1f(0x0), v2be
                0xb22: vb22(0x40) = CONST 
                0xb24: vb24(0x0) = CONST 
                0xb26: vb26 = SHA3 vb24(0x0), vb22(0x40)
                0xb27: vb27(0x0) = CONST 
                0xb2d: vb2d = SLOAD vb26
                0xb2f: JUMP v2a1(0x2cc)

                Begin block 0x2cc
                prev=[0xb18], succ=[]
                =================================
                0x2cd: v2cd(0x40) = CONST 
                0x2cf: v2cf = MLOAD v2cd(0x40)
                0x2d3: MSTORE v2cf, vb2d
                0x2d4: v2d4(0x20) = CONST 
                0x2d6: v2d6 = ADD v2d4(0x20), v2cf
                0x2da: v2da(0x40) = CONST 
                0x2dc: v2dc = MLOAD v2da(0x40)
                0x2df: v2df(0x20) = SUB v2d6, v2dc
                0x2e1: RETURN v2dc, v2df(0x20)

            }


            function symbol()() public {
                Begin block 0x2e2
                prev=[], succ=[0x2e9, 0x2ed]
                =================================
                0x2e3: v2e3 = CALLVALUE 
                0x2e4: v2e4 = ISZERO v2e3
                0x2e5: v2e5(0x2ed) = CONST 
                0x2e8: JUMPI v2e5(0x2ed), v2e4

                Begin block 0x2e9
                prev=[0x2e2], succ=[]
                =================================
                0x2e9: v2e9(0x0) = CONST 
                0x2ec: REVERT v2e9(0x0), v2e9(0x0)

                Begin block 0x2ed
                prev=[0x2e2], succ=[0x2f5]
                =================================
                0x2ee: v2ee(0x2f5) = CONST 
                0x2f1: v2f1(0xb30) = CONST 
                0x2f4: v2f4_0, v2f4_1 = CALLPRIVATE v2f1(0xb30), v2ee(0x2f5)

                Begin block 0x2f5
                prev=[0x2ed], succ=[0x31a]
                =================================
                0x2f6: v2f6(0x40) = CONST 
                0x2f8: v2f8 = MLOAD v2f6(0x40)
                0x2fb: v2fb(0x20) = CONST 
                0x2fd: v2fd = ADD v2fb(0x20), v2f8
                0x300: v300(0x20) = SUB v2fd, v2f8
                0x302: MSTORE v2f8, v300(0x20)
                0x306: v306 = MLOAD v2f4_0
                0x308: MSTORE v2fd, v306
                0x309: v309(0x20) = CONST 
                0x30b: v30b = ADD v309(0x20), v2fd
                0x30f: v30f = MLOAD v2f4_0
                0x311: v311(0x20) = CONST 
                0x313: v313 = ADD v311(0x20), v2f4_0
                0x318: v318(0x0) = CONST 

                Begin block 0x31a
                prev=[0x2f5, 0x323], succ=[0x335, 0x323]
                =================================
                0x31a_0x0: v31a_0 = PHI v318(0x0), v32e
                0x31d: v31d = LT v31a_0, v30f
                0x31e: v31e = ISZERO v31d
                0x31f: v31f(0x335) = CONST 
                0x322: JUMPI v31f(0x335), v31e

                Begin block 0x335
                prev=[0x31a], succ=[0x362, 0x349]
                =================================
                0x33e: v33e = ADD v30f, v30b
                0x340: v340(0x1f) = CONST 
                0x342: v342 = AND v340(0x1f), v30f
                0x344: v344 = ISZERO v342
                0x345: v345(0x362) = CONST 
                0x348: JUMPI v345(0x362), v344

                Begin block 0x362
                prev=[0x335, 0x349], succ=[]
                =================================
                0x362_0x1: v362_1 = PHI v33e, v35f
                0x368: v368(0x40) = CONST 
                0x36a: v36a = MLOAD v368(0x40)
                0x36d: v36d = SUB v362_1, v36a
                0x36f: RETURN v36a, v36d

                Begin block 0x349
                prev=[0x335], succ=[0x362]
                =================================
                0x34b: v34b = SUB v33e, v342
                0x34d: v34d = MLOAD v34b
                0x34e: v34e(0x1) = CONST 
                0x351: v351(0x20) = CONST 
                0x353: v353 = SUB v351(0x20), v342
                0x354: v354(0x100) = CONST 
                0x357: v357 = EXP v354(0x100), v353
                0x358: v358 = SUB v357, v34e(0x1)
                0x359: v359 = NOT v358
                0x35a: v35a = AND v359, v34d
                0x35c: MSTORE v34b, v35a
                0x35d: v35d(0x20) = CONST 
                0x35f: v35f = ADD v35d(0x20), v34b

                Begin block 0x323
                prev=[0x31a], succ=[0x31a]
                =================================
                0x323_0x0: v323_0 = PHI v318(0x0), v32e
                0x325: v325 = ADD v313, v323_0
                0x326: v326 = MLOAD v325
                0x329: v329 = ADD v30b, v323_0
                0x32a: MSTORE v329, v326
                0x32b: v32b(0x20) = CONST 
                0x32e: v32e = ADD v323_0, v32b(0x20)
                0x331: v331(0x31a) = CONST 
                0x334: JUMP v331(0x31a)

            }


            function transfer(address,uint256)() public {
                Begin block 0x370
                prev=[], succ=[0x377, 0x37b]
                =================================
                0x371: v371 = CALLVALUE 
                0x372: v372 = ISZERO v371
                0x373: v373(0x37b) = CONST 
                0x376: JUMPI v373(0x37b), v372

                Begin block 0x377
                prev=[0x370], succ=[]
                =================================
                0x377: v377(0x0) = CONST 
                0x37a: REVERT v377(0x0), v377(0x0)

                Begin block 0x37b
                prev=[0x370], succ=[0xbceB0x37b]
                =================================
                0x37c: v37c(0x3b0) = CONST 
                0x37f: v37f(0x4) = CONST 
                0x383: v383 = CALLDATALOAD v37f(0x4)
                0x384: v384(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x399: v399 = AND v384(0xffffffffffffffffffffffffffffffffffffffff), v383
                0x39b: v39b(0x20) = CONST 
                0x39d: v39d(0x24) = ADD v39b(0x20), v37f(0x4)
                0x3a2: v3a2 = CALLDATALOAD v39d(0x24)
                0x3a4: v3a4(0x20) = CONST 
                0x3a6: v3a6(0x44) = ADD v3a4(0x20), v39d(0x24)
                0x3ac: v3ac(0xbce) = CONST 
                0x3af: JUMP v3ac(0xbce)

                Begin block 0xbceB0x37b
                prev=[0x37b], succ=[0xbdbB0x37b]
                =================================
                0xbcfS0x37b: vbcfV37b(0x0) = CONST 
                0xbd1S0x37b: vbd1V37b(0xbdb) = CONST 
                0xbd4S0x37b: vbd4V37b = CALLER 
                0xbd7S0x37b: vbd7V37b(0x68c) = CONST 
                0xbdaS0x37b: vbda_0V37b = CALLPRIVATE vbd7V37b(0x68c), v3a2, v399, vbd4V37b, vbd1V37b(0xbdb)

                Begin block 0xbdbB0x37b
                prev=[0xbceB0x37b], succ=[0x3b0]
                =================================
                0xbe2S0x37b: JUMP v37c(0x3b0)

                Begin block 0x3b0
                prev=[0xbdbB0x37b], succ=[]
                =================================
                0x3b1: v3b1(0x40) = CONST 
                0x3b3: v3b3 = MLOAD v3b1(0x40)
                0x3b6: v3b6 = ISZERO vbda_0V37b
                0x3b7: v3b7 = ISZERO v3b6
                0x3b8: v3b8 = ISZERO v3b7
                0x3b9: v3b9 = ISZERO v3b8
                0x3bb: MSTORE v3b3, v3b9
                0x3bc: v3bc(0x20) = CONST 
                0x3be: v3be = ADD v3bc(0x20), v3b3
                0x3c2: v3c2(0x40) = CONST 
                0x3c4: v3c4 = MLOAD v3c2(0x40)
                0x3c7: v3c7(0x20) = SUB v3be, v3c4
                0x3c9: RETURN v3c4, v3c7(0x20)

            }


            function deposit()() public {
                Begin block 0x3ca
                prev=[], succ=[0x440B0x3ca]
                =================================
                0x3cb: v3cb(0x3d2) = CONST 
                0x3ce: v3ce(0x440) = CONST 
                0x3d1: JUMP v3ce(0x440), v3cb(0x3d2)

                Begin block 0x440B0x3ca
                prev=[0x3ca], succ=[0x3d2]
                =================================
                0x441S0x3ca: v441V3ca = CALLVALUE 
                0x442S0x3ca: v442V3ca(0x3) = CONST 
                0x444S0x3ca: v444V3ca(0x0) = CONST 
                0x446S0x3ca: v446V3ca = CALLER 
                0x447S0x3ca: v447V3ca(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x45cS0x3ca: v45cV3ca = AND v447V3ca(0xffffffffffffffffffffffffffffffffffffffff), v446V3ca
                0x45dS0x3ca: v45dV3ca(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x472S0x3ca: v472V3ca = AND v45dV3ca(0xffffffffffffffffffffffffffffffffffffffff), v45cV3ca
                0x474S0x3ca: MSTORE v444V3ca(0x0), v472V3ca
                0x475S0x3ca: v475V3ca(0x20) = CONST 
                0x477S0x3ca: v477V3ca(0x20) = ADD v475V3ca(0x20), v444V3ca(0x0)
                0x47aS0x3ca: MSTORE v477V3ca(0x20), v442V3ca(0x3)
                0x47bS0x3ca: v47bV3ca(0x20) = CONST 
                0x47dS0x3ca: v47dV3ca(0x40) = ADD v47bV3ca(0x20), v477V3ca(0x20)
                0x47eS0x3ca: v47eV3ca(0x0) = CONST 
                0x480S0x3ca: v480V3ca = SHA3 v47eV3ca(0x0), v47dV3ca(0x40)
                0x481S0x3ca: v481V3ca(0x0) = CONST 
                0x485S0x3ca: v485V3ca = SLOAD v480V3ca
                0x486S0x3ca: v486V3ca = ADD v485V3ca, v441V3ca
                0x48cS0x3ca: SSTORE v480V3ca, v486V3ca
                0x48eS0x3ca: v48eV3ca = CALLER 
                0x48fS0x3ca: v48fV3ca(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x4a4S0x3ca: v4a4V3ca = AND v48fV3ca(0xffffffffffffffffffffffffffffffffffffffff), v48eV3ca
                0x4a5S0x3ca: v4a5V3ca(0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c) = CONST 
                0x4c6S0x3ca: v4c6V3ca = CALLVALUE 
                0x4c7S0x3ca: v4c7V3ca(0x40) = CONST 
                0x4c9S0x3ca: v4c9V3ca = MLOAD v4c7V3ca(0x40)
                0x4cdS0x3ca: MSTORE v4c9V3ca, v4c6V3ca
                0x4ceS0x3ca: v4ceV3ca(0x20) = CONST 
                0x4d0S0x3ca: v4d0V3ca = ADD v4ceV3ca(0x20), v4c9V3ca
                0x4d4S0x3ca: v4d4V3ca(0x40) = CONST 
                0x4d6S0x3ca: v4d6V3ca = MLOAD v4d4V3ca(0x40)
                0x4d9S0x3ca: v4d9V3ca(0x20) = SUB v4d0V3ca, v4d6V3ca
                0x4dbS0x3ca: LOG2 v4d6V3ca, v4d9V3ca(0x20), v4a5V3ca(0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c), v4a4V3ca
                0x4dcS0x3ca: JUMP v3cb(0x3d2)

                Begin block 0x3d2
                prev=[0x440B0x3ca], succ=[]
                =================================
                0x3d3: STOP 

            }


            function allowance(address,address)() public {
                Begin block 0x3d4
                prev=[], succ=[0x3db, 0x3df]
                =================================
                0x3d5: v3d5 = CALLVALUE 
                0x3d6: v3d6 = ISZERO v3d5
                0x3d7: v3d7(0x3df) = CONST 
                0x3da: JUMPI v3d7(0x3df), v3d6

                Begin block 0x3db
                prev=[0x3d4], succ=[]
                =================================
                0x3db: v3db(0x0) = CONST 
                0x3de: REVERT v3db(0x0), v3db(0x0)

                Begin block 0x3df
                prev=[0x3d4], succ=[0xbe3]
                =================================
                0x3e0: v3e0(0x42a) = CONST 
                0x3e3: v3e3(0x4) = CONST 
                0x3e7: v3e7 = CALLDATALOAD v3e3(0x4)
                0x3e8: v3e8(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x3fd: v3fd = AND v3e8(0xffffffffffffffffffffffffffffffffffffffff), v3e7
                0x3ff: v3ff(0x20) = CONST 
                0x401: v401(0x24) = ADD v3ff(0x20), v3e3(0x4)
                0x406: v406 = CALLDATALOAD v401(0x24)
                0x407: v407(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x41c: v41c = AND v407(0xffffffffffffffffffffffffffffffffffffffff), v406
                0x41e: v41e(0x20) = CONST 
                0x420: v420(0x44) = ADD v41e(0x20), v401(0x24)
                0x426: v426(0xbe3) = CONST 
                0x429: JUMP v426(0xbe3)

                Begin block 0xbe3
                prev=[0x3df], succ=[0x42a]
                =================================
                0xbe4: vbe4(0x4) = CONST 
                0xbe6: vbe6(0x20) = CONST 
                0xbe8: MSTORE vbe6(0x20), vbe4(0x4)
                0xbea: vbea(0x0) = CONST 
                0xbec: MSTORE vbea(0x0), v3fd
                0xbed: vbed(0x40) = CONST 
                0xbef: vbef(0x0) = CONST 
                0xbf1: vbf1 = SHA3 vbef(0x0), vbed(0x40)
                0xbf2: vbf2(0x20) = CONST 
                0xbf4: MSTORE vbf2(0x20), vbf1
                0xbf6: vbf6(0x0) = CONST 
                0xbf8: MSTORE vbf6(0x0), v41c
                0xbf9: vbf9(0x40) = CONST 
                0xbfb: vbfb(0x0) = CONST 
                0xbfd: vbfd = SHA3 vbfb(0x0), vbf9(0x40)
                0xbfe: vbfe(0x0) = CONST 
                0xc05: vc05 = SLOAD vbfd
                0xc07: JUMP v3e0(0x42a)

                Begin block 0x42a
                prev=[0xbe3], succ=[]
                =================================
                0x42b: v42b(0x40) = CONST 
                0x42d: v42d = MLOAD v42b(0x40)
                0x431: MSTORE v42d, vc05
                0x432: v432(0x20) = CONST 
                0x434: v434 = ADD v432(0x20), v42d
                0x438: v438(0x40) = CONST 
                0x43a: v43a = MLOAD v438(0x40)
                0x43d: v43d(0x20) = SUB v434, v43a
                0x43f: RETURN v43a, v43d(0x20)

            }


            function 0x4dd(0x4ddarg0x0) private {
                Begin block 0x4dd
                prev=[], succ=[0xc53, 0x52d]
                =================================
                0x4de: v4de(0x0) = CONST 
                0x4e1: v4e1 = SLOAD v4de(0x0)
                0x4e2: v4e2(0x1) = CONST 
                0x4e5: v4e5(0x1) = CONST 
                0x4e7: v4e7 = AND v4e5(0x1), v4e1
                0x4e8: v4e8 = ISZERO v4e7
                0x4e9: v4e9(0x100) = CONST 
                0x4ec: v4ec = MUL v4e9(0x100), v4e8
                0x4ed: v4ed = SUB v4ec, v4e2(0x1)
                0x4ee: v4ee = AND v4ed, v4e1
                0x4ef: v4ef(0x2) = CONST 
                0x4f2: v4f2 = DIV v4ee, v4ef(0x2)
                0x4f4: v4f4(0x1f) = CONST 
                0x4f6: v4f6 = ADD v4f4(0x1f), v4f2
                0x4f7: v4f7(0x20) = CONST 
                0x4fb: v4fb = DIV v4f6, v4f7(0x20)
                0x4fc: v4fc = MUL v4fb, v4f7(0x20)
                0x4fd: v4fd(0x20) = CONST 
                0x4ff: v4ff = ADD v4fd(0x20), v4fc
                0x500: v500(0x40) = CONST 
                0x502: v502 = MLOAD v500(0x40)
                0x505: v505 = ADD v502, v4ff
                0x506: v506(0x40) = CONST 
                0x508: MSTORE v506(0x40), v505
                0x50f: MSTORE v502, v4f2
                0x510: v510(0x20) = CONST 
                0x512: v512 = ADD v510(0x20), v502
                0x515: v515 = SLOAD v4de(0x0)
                0x516: v516(0x1) = CONST 
                0x519: v519(0x1) = CONST 
                0x51b: v51b = AND v519(0x1), v515
                0x51c: v51c = ISZERO v51b
                0x51d: v51d(0x100) = CONST 
                0x520: v520 = MUL v51d(0x100), v51c
                0x521: v521 = SUB v520, v516(0x1)
                0x522: v522 = AND v521, v515
                0x523: v523(0x2) = CONST 
                0x526: v526 = DIV v522, v523(0x2)
                0x528: v528 = ISZERO v526
                0x529: v529(0xc53) = CONST 
                0x52c: JUMPI v529(0xc53), v528

                Begin block 0xc53
                prev=[0x4dd], succ=[]
                =================================
                0xc5a: RETURNPRIVATE v4ddarg0, v502, v4ddarg0

                Begin block 0x52d
                prev=[0x4dd], succ=[0x535, 0x548]
                =================================
                0x52e: v52e(0x1f) = CONST 
                0x530: v530 = LT v52e(0x1f), v526
                0x531: v531(0x548) = CONST 
                0x534: JUMPI v531(0x548), v530

                Begin block 0x535
                prev=[0x52d], succ=[0xc7a]
                =================================
                0x535: v535(0x100) = CONST 
                0x53a: v53a = SLOAD v4de(0x0)
                0x53b: v53b = DIV v53a, v535(0x100)
                0x53c: v53c = MUL v53b, v535(0x100)
                0x53e: MSTORE v512, v53c
                0x540: v540(0x20) = CONST 
                0x542: v542 = ADD v540(0x20), v512
                0x544: v544(0xc7a) = CONST 
                0x547: JUMP v544(0xc7a)

                Begin block 0xc7a
                prev=[0x535], succ=[]
                =================================
                0xc81: RETURNPRIVATE v4ddarg0, v502, v4ddarg0

                Begin block 0x548
                prev=[0x52d], succ=[0x556]
                =================================
                0x54a: v54a = ADD v512, v526
                0x54d: v54d(0x0) = CONST 
                0x54f: MSTORE v54d(0x0), v4de(0x0)
                0x550: v550(0x20) = CONST 
                0x552: v552(0x0) = CONST 
                0x554: v554 = SHA3 v552(0x0), v550(0x20)

                Begin block 0x556
                prev=[0x548, 0x556], succ=[0x556, 0x56a]
                =================================
                0x556_0x0: v556_0 = PHI v512, v562
                0x556_0x1: v556_1 = PHI v554, v55e
                0x558: v558 = SLOAD v556_1
                0x55a: MSTORE v556_0, v558
                0x55c: v55c(0x1) = CONST 
                0x55e: v55e = ADD v55c(0x1), v556_1
                0x560: v560(0x20) = CONST 
                0x562: v562 = ADD v560(0x20), v556_0
                0x565: v565 = GT v54a, v562
                0x566: v566(0x556) = CONST 
                0x569: JUMPI v566(0x556), v565

                Begin block 0x56a
                prev=[0x556], succ=[0x573]
                =================================
                0x56c: v56c = SUB v562, v54a
                0x56d: v56d(0x1f) = CONST 
                0x56f: v56f = AND v56d(0x1f), v56c
                0x571: v571 = ADD v54a, v56f

                Begin block 0x573
                prev=[0x56a], succ=[]
                =================================
                0x57a: RETURNPRIVATE v4ddarg0, v502, v4ddarg0

            }


            function 0x68c(0x68carg0x0, 0x68carg0x1, 0x68carg0x2, 0x68carg0x3)
            private {
                Begin block 0x68c
                prev=[], succ=[0x6d8, 0x6dc]
                =================================
                0x68d: v68d(0x0) = CONST 
                0x690: v690(0x3) = CONST 
                0x692: v692(0x0) = CONST 
                0x695: v695(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x6aa: v6aa = AND v695(0xffffffffffffffffffffffffffffffffffffffff), v68carg2
                0x6ab: v6ab(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x6c0: v6c0 = AND v6ab(0xffffffffffffffffffffffffffffffffffffffff), v6aa
                0x6c2: MSTORE v692(0x0), v6c0
                0x6c3: v6c3(0x20) = CONST 
                0x6c5: v6c5(0x20) = ADD v6c3(0x20), v692(0x0)
                0x6c8: MSTORE v6c5(0x20), v690(0x3)
                0x6c9: v6c9(0x20) = CONST 
                0x6cb: v6cb(0x40) = ADD v6c9(0x20), v6c5(0x20)
                0x6cc: v6cc(0x0) = CONST 
                0x6ce: v6ce = SHA3 v6cc(0x0), v6cb(0x40)
                0x6cf: v6cf = SLOAD v6ce
                0x6d0: v6d0 = LT v6cf, v68carg0
                0x6d1: v6d1 = ISZERO v6d0
                0x6d2: v6d2 = ISZERO v6d1
                0x6d3: v6d3 = ISZERO v6d2
                0x6d4: v6d4(0x6dc) = CONST 
                0x6d7: JUMPI v6d4(0x6dc), v6d3

                Begin block 0x6d8
                prev=[0x68c], succ=[]
                =================================
                0x6d8: v6d8(0x0) = CONST 
                0x6db: REVERT v6d8(0x0), v6d8(0x0)

                Begin block 0x6dc
                prev=[0x68c], succ=[0x7b4, 0x713]
                =================================
                0x6dd: v6dd = CALLER 
                0x6de: v6de(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x6f3: v6f3 = AND v6de(0xffffffffffffffffffffffffffffffffffffffff), v6dd
                0x6f5: v6f5(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x70a: v70a = AND v6f5(0xffffffffffffffffffffffffffffffffffffffff), v68carg2
                0x70b: v70b = EQ v70a, v6f3
                0x70c: v70c = ISZERO v70b
                0x70e: v70e = ISZERO v70c
                0x70f: v70f(0x7b4) = CONST 
                0x712: JUMPI v70f(0x7b4), v70e

                Begin block 0x7b4
                prev=[0x6dc, 0x713], succ=[0x8cf, 0x7ba]
                =================================
                0x7b4_0x0: v7b4_0 = PHI v70c, v7b3
                0x7b5: v7b5 = ISZERO v7b4_0
                0x7b6: v7b6(0x8cf) = CONST 
                0x7b9: JUMPI v7b6(0x8cf), v7b5

                Begin block 0x8cf
                prev=[0x7b4, 0x844], succ=[]
                =================================
                0x8d1: v8d1(0x3) = CONST 
                0x8d3: v8d3(0x0) = CONST 
                0x8d6: v8d6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x8eb: v8eb = AND v8d6(0xffffffffffffffffffffffffffffffffffffffff), v68carg2
                0x8ec: v8ec(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x901: v901 = AND v8ec(0xffffffffffffffffffffffffffffffffffffffff), v8eb
                0x903: MSTORE v8d3(0x0), v901
                0x904: v904(0x20) = CONST 
                0x906: v906(0x20) = ADD v904(0x20), v8d3(0x0)
                0x909: MSTORE v906(0x20), v8d1(0x3)
                0x90a: v90a(0x20) = CONST 
                0x90c: v90c(0x40) = ADD v90a(0x20), v906(0x20)
                0x90d: v90d(0x0) = CONST 
                0x90f: v90f = SHA3 v90d(0x0), v90c(0x40)
                0x910: v910(0x0) = CONST 
                0x914: v914 = SLOAD v90f
                0x915: v915 = SUB v914, v68carg0
                0x91b: SSTORE v90f, v915
                0x91e: v91e(0x3) = CONST 
                0x920: v920(0x0) = CONST 
                0x923: v923(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x938: v938 = AND v923(0xffffffffffffffffffffffffffffffffffffffff), v68carg1
                0x939: v939(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x94e: v94e = AND v939(0xffffffffffffffffffffffffffffffffffffffff), v938
                0x950: MSTORE v920(0x0), v94e
                0x951: v951(0x20) = CONST 
                0x953: v953(0x20) = ADD v951(0x20), v920(0x0)
                0x956: MSTORE v953(0x20), v91e(0x3)
                0x957: v957(0x20) = CONST 
                0x959: v959(0x40) = ADD v957(0x20), v953(0x20)
                0x95a: v95a(0x0) = CONST 
                0x95c: v95c = SHA3 v95a(0x0), v959(0x40)
                0x95d: v95d(0x0) = CONST 
                0x961: v961 = SLOAD v95c
                0x962: v962 = ADD v961, v68carg0
                0x968: SSTORE v95c, v962
                0x96b: v96b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x980: v980 = AND v96b(0xffffffffffffffffffffffffffffffffffffffff), v68carg1
                0x982: v982(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x997: v997 = AND v982(0xffffffffffffffffffffffffffffffffffffffff), v68carg2
                0x998: v998(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
                0x9ba: v9ba(0x40) = CONST 
                0x9bc: v9bc = MLOAD v9ba(0x40)
                0x9c0: MSTORE v9bc, v68carg0
                0x9c1: v9c1(0x20) = CONST 
                0x9c3: v9c3 = ADD v9c1(0x20), v9bc
                0x9c7: v9c7(0x40) = CONST 
                0x9c9: v9c9 = MLOAD v9c7(0x40)
                0x9cc: v9cc(0x20) = SUB v9c3, v9c9
                0x9ce: LOG3 v9c9, v9cc(0x20), v998(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef), v997, v980
                0x9cf: v9cf(0x1) = CONST 
                0x9d8: RETURNPRIVATE v68carg3, v9cf(0x1)

                Begin block 0x7ba
                prev=[0x7b4], succ=[0x840, 0x844]
                =================================
                0x7bb: v7bb(0x4) = CONST 
                0x7bd: v7bd(0x0) = CONST 
                0x7c0: v7c0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x7d5: v7d5 = AND v7c0(0xffffffffffffffffffffffffffffffffffffffff), v68carg2
                0x7d6: v7d6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x7eb: v7eb = AND v7d6(0xffffffffffffffffffffffffffffffffffffffff), v7d5
                0x7ed: MSTORE v7bd(0x0), v7eb
                0x7ee: v7ee(0x20) = CONST 
                0x7f0: v7f0(0x20) = ADD v7ee(0x20), v7bd(0x0)
                0x7f3: MSTORE v7f0(0x20), v7bb(0x4)
                0x7f4: v7f4(0x20) = CONST 
                0x7f6: v7f6(0x40) = ADD v7f4(0x20), v7f0(0x20)
                0x7f7: v7f7(0x0) = CONST 
                0x7f9: v7f9 = SHA3 v7f7(0x0), v7f6(0x40)
                0x7fa: v7fa(0x0) = CONST 
                0x7fc: v7fc = CALLER 
                0x7fd: v7fd(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x812: v812 = AND v7fd(0xffffffffffffffffffffffffffffffffffffffff), v7fc
                0x813: v813(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x828: v828 = AND v813(0xffffffffffffffffffffffffffffffffffffffff), v812
                0x82a: MSTORE v7fa(0x0), v828
                0x82b: v82b(0x20) = CONST 
                0x82d: v82d(0x20) = ADD v82b(0x20), v7fa(0x0)
                0x830: MSTORE v82d(0x20), v7f9
                0x831: v831(0x20) = CONST 
                0x833: v833(0x40) = ADD v831(0x20), v82d(0x20)
                0x834: v834(0x0) = CONST 
                0x836: v836 = SHA3 v834(0x0), v833(0x40)
                0x837: v837 = SLOAD v836
                0x838: v838 = LT v837, v68carg0
                0x839: v839 = ISZERO v838
                0x83a: v83a = ISZERO v839
                0x83b: v83b = ISZERO v83a
                0x83c: v83c(0x844) = CONST 
                0x83f: JUMPI v83c(0x844), v83b

                Begin block 0x840
                prev=[0x7ba], succ=[]
                =================================
                0x840: v840(0x0) = CONST 
                0x843: REVERT v840(0x0), v840(0x0)

                Begin block 0x844
                prev=[0x7ba], succ=[0x8cf]
                =================================
                0x846: v846(0x4) = CONST 
                0x848: v848(0x0) = CONST 
                0x84b: v84b(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x860: v860 = AND v84b(0xffffffffffffffffffffffffffffffffffffffff), v68carg2
                0x861: v861(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x876: v876 = AND v861(0xffffffffffffffffffffffffffffffffffffffff), v860
                0x878: MSTORE v848(0x0), v876
                0x879: v879(0x20) = CONST 
                0x87b: v87b(0x20) = ADD v879(0x20), v848(0x0)
                0x87e: MSTORE v87b(0x20), v846(0x4)
                0x87f: v87f(0x20) = CONST 
                0x881: v881(0x40) = ADD v87f(0x20), v87b(0x20)
                0x882: v882(0x0) = CONST 
                0x884: v884 = SHA3 v882(0x0), v881(0x40)
                0x885: v885(0x0) = CONST 
                0x887: v887 = CALLER 
                0x888: v888(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x89d: v89d = AND v888(0xffffffffffffffffffffffffffffffffffffffff), v887
                0x89e: v89e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x8b3: v8b3 = AND v89e(0xffffffffffffffffffffffffffffffffffffffff), v89d
                0x8b5: MSTORE v885(0x0), v8b3
                0x8b6: v8b6(0x20) = CONST 
                0x8b8: v8b8(0x20) = ADD v8b6(0x20), v885(0x0)
                0x8bb: MSTORE v8b8(0x20), v884
                0x8bc: v8bc(0x20) = CONST 
                0x8be: v8be(0x40) = ADD v8bc(0x20), v8b8(0x20)
                0x8bf: v8bf(0x0) = CONST 
                0x8c1: v8c1 = SHA3 v8bf(0x0), v8be(0x40)
                0x8c2: v8c2(0x0) = CONST 
                0x8c6: v8c6 = SLOAD v8c1
                0x8c7: v8c7 = SUB v8c6, v68carg0
                0x8cd: SSTORE v8c1, v8c7

                Begin block 0x713
                prev=[0x6dc], succ=[0x7b4]
                =================================
                0x714: v714(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x735: v735(0x4) = CONST 
                0x737: v737(0x0) = CONST 
                0x73a: v73a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x74f: v74f = AND v73a(0xffffffffffffffffffffffffffffffffffffffff), v68carg2
                0x750: v750(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x765: v765 = AND v750(0xffffffffffffffffffffffffffffffffffffffff), v74f
                0x767: MSTORE v737(0x0), v765
                0x768: v768(0x20) = CONST 
                0x76a: v76a(0x20) = ADD v768(0x20), v737(0x0)
                0x76d: MSTORE v76a(0x20), v735(0x4)
                0x76e: v76e(0x20) = CONST 
                0x770: v770(0x40) = ADD v76e(0x20), v76a(0x20)
                0x771: v771(0x0) = CONST 
                0x773: v773 = SHA3 v771(0x0), v770(0x40)
                0x774: v774(0x0) = CONST 
                0x776: v776 = CALLER 
                0x777: v777(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x78c: v78c = AND v777(0xffffffffffffffffffffffffffffffffffffffff), v776
                0x78d: v78d(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x7a2: v7a2 = AND v78d(0xffffffffffffffffffffffffffffffffffffffff), v78c
                0x7a4: MSTORE v774(0x0), v7a2
                0x7a5: v7a5(0x20) = CONST 
                0x7a7: v7a7(0x20) = ADD v7a5(0x20), v774(0x0)
                0x7aa: MSTORE v7a7(0x20), v773
                0x7ab: v7ab(0x20) = CONST 
                0x7ad: v7ad(0x40) = ADD v7ab(0x20), v7a7(0x20)
                0x7ae: v7ae(0x0) = CONST 
                0x7b0: v7b0 = SHA3 v7ae(0x0), v7ad(0x40)
                0x7b1: v7b1 = SLOAD v7b0
                0x7b2: v7b2 = EQ v7b1, v714(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
                0x7b3: v7b3 = ISZERO v7b2

            }


            function ROOT4146650865()() public {
                Begin block 0xaf
                prev=[], succ=[0x440B0xaf]
                =================================
                0xb0: vb0(0xb7) = CONST 
                0xb3: vb3(0x440) = CONST 
                0xb6: JUMP vb3(0x440), vb0(0xb7)

                Begin block 0x440B0xaf
                prev=[0xaf], succ=[0xb7]
                =================================
                0x441S0xaf: v441Vaf = CALLVALUE 
                0x442S0xaf: v442Vaf(0x3) = CONST 
                0x444S0xaf: v444Vaf(0x0) = CONST 
                0x446S0xaf: v446Vaf = CALLER 
                0x447S0xaf: v447Vaf(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x45cS0xaf: v45cVaf = AND v447Vaf(0xffffffffffffffffffffffffffffffffffffffff), v446Vaf
                0x45dS0xaf: v45dVaf(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x472S0xaf: v472Vaf = AND v45dVaf(0xffffffffffffffffffffffffffffffffffffffff), v45cVaf
                0x474S0xaf: MSTORE v444Vaf(0x0), v472Vaf
                0x475S0xaf: v475Vaf(0x20) = CONST 
                0x477S0xaf: v477Vaf(0x20) = ADD v475Vaf(0x20), v444Vaf(0x0)
                0x47aS0xaf: MSTORE v477Vaf(0x20), v442Vaf(0x3)
                0x47bS0xaf: v47bVaf(0x20) = CONST 
                0x47dS0xaf: v47dVaf(0x40) = ADD v47bVaf(0x20), v477Vaf(0x20)
                0x47eS0xaf: v47eVaf(0x0) = CONST 
                0x480S0xaf: v480Vaf = SHA3 v47eVaf(0x0), v47dVaf(0x40)
                0x481S0xaf: v481Vaf(0x0) = CONST 
                0x485S0xaf: v485Vaf = SLOAD v480Vaf
                0x486S0xaf: v486Vaf = ADD v485Vaf, v441Vaf
                0x48cS0xaf: SSTORE v480Vaf, v486Vaf
                0x48eS0xaf: v48eVaf = CALLER 
                0x48fS0xaf: v48fVaf(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
                0x4a4S0xaf: v4a4Vaf = AND v48fVaf(0xffffffffffffffffffffffffffffffffffffffff), v48eVaf
                0x4a5S0xaf: v4a5Vaf(0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c) = CONST 
                0x4c6S0xaf: v4c6Vaf = CALLVALUE 
                0x4c7S0xaf: v4c7Vaf(0x40) = CONST 
                0x4c9S0xaf: v4c9Vaf = MLOAD v4c7Vaf(0x40)
                0x4cdS0xaf: MSTORE v4c9Vaf, v4c6Vaf
                0x4ceS0xaf: v4ceVaf(0x20) = CONST 
                0x4d0S0xaf: v4d0Vaf = ADD v4ceVaf(0x20), v4c9Vaf
                0x4d4S0xaf: v4d4Vaf(0x40) = CONST 
                0x4d6S0xaf: v4d6Vaf = MLOAD v4d4Vaf(0x40)
                0x4d9S0xaf: v4d9Vaf(0x20) = SUB v4d0Vaf, v4d6Vaf
                0x4dbS0xaf: LOG2 v4d6Vaf, v4d9Vaf(0x20), v4a5Vaf(0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c), v4a4Vaf
                0x4dcS0xaf: JUMP vb0(0xb7)

                Begin block 0xb7
                prev=[0x440B0xaf], succ=[]
                =================================
                0xb8: STOP 

            }


            function 0xb30(0xb30arg0x0) private {
                Begin block 0xb30
                prev=[], succ=[0xca1, 0xb80]
                =================================
                0xb31: vb31(0x1) = CONST 
                0xb34: vb34 = SLOAD vb31(0x1)
                0xb35: vb35(0x1) = CONST 
                0xb38: vb38(0x1) = CONST 
                0xb3a: vb3a = AND vb38(0x1), vb34
                0xb3b: vb3b = ISZERO vb3a
                0xb3c: vb3c(0x100) = CONST 
                0xb3f: vb3f = MUL vb3c(0x100), vb3b
                0xb40: vb40 = SUB vb3f, vb35(0x1)
                0xb41: vb41 = AND vb40, vb34
                0xb42: vb42(0x2) = CONST 
                0xb45: vb45 = DIV vb41, vb42(0x2)
                0xb47: vb47(0x1f) = CONST 
                0xb49: vb49 = ADD vb47(0x1f), vb45
                0xb4a: vb4a(0x20) = CONST 
                0xb4e: vb4e = DIV vb49, vb4a(0x20)
                0xb4f: vb4f = MUL vb4e, vb4a(0x20)
                0xb50: vb50(0x20) = CONST 
                0xb52: vb52 = ADD vb50(0x20), vb4f
                0xb53: vb53(0x40) = CONST 
                0xb55: vb55 = MLOAD vb53(0x40)
                0xb58: vb58 = ADD vb55, vb52
                0xb59: vb59(0x40) = CONST 
                0xb5b: MSTORE vb59(0x40), vb58
                0xb62: MSTORE vb55, vb45
                0xb63: vb63(0x20) = CONST 
                0xb65: vb65 = ADD vb63(0x20), vb55
                0xb68: vb68 = SLOAD vb31(0x1)
                0xb69: vb69(0x1) = CONST 
                0xb6c: vb6c(0x1) = CONST 
                0xb6e: vb6e = AND vb6c(0x1), vb68
                0xb6f: vb6f = ISZERO vb6e
                0xb70: vb70(0x100) = CONST 
                0xb73: vb73 = MUL vb70(0x100), vb6f
                0xb74: vb74 = SUB vb73, vb69(0x1)
                0xb75: vb75 = AND vb74, vb68
                0xb76: vb76(0x2) = CONST 
                0xb79: vb79 = DIV vb75, vb76(0x2)
                0xb7b: vb7b = ISZERO vb79
                0xb7c: vb7c(0xca1) = CONST 
                0xb7f: JUMPI vb7c(0xca1), vb7b

                Begin block 0xca1
                prev=[0xb30], succ=[]
                =================================
                0xca8: RETURNPRIVATE vb30arg0, vb55, vb30arg0

                Begin block 0xb80
                prev=[0xb30], succ=[0xb88, 0xb9b]
                =================================
                0xb81: vb81(0x1f) = CONST 
                0xb83: vb83 = LT vb81(0x1f), vb79
                0xb84: vb84(0xb9b) = CONST 
                0xb87: JUMPI vb84(0xb9b), vb83

                Begin block 0xb88
                prev=[0xb80], succ=[0xcc8]
                =================================
                0xb88: vb88(0x100) = CONST 
                0xb8d: vb8d = SLOAD vb31(0x1)
                0xb8e: vb8e = DIV vb8d, vb88(0x100)
                0xb8f: vb8f = MUL vb8e, vb88(0x100)
                0xb91: MSTORE vb65, vb8f
                0xb93: vb93(0x20) = CONST 
                0xb95: vb95 = ADD vb93(0x20), vb65
                0xb97: vb97(0xcc8) = CONST 
                0xb9a: JUMP vb97(0xcc8)

                Begin block 0xcc8
                prev=[0xb88], succ=[]
                =================================
                0xccf: RETURNPRIVATE vb30arg0, vb55, vb30arg0

                Begin block 0xb9b
                prev=[0xb80], succ=[0xba9]
                =================================
                0xb9d: vb9d = ADD vb65, vb79
                0xba0: vba0(0x0) = CONST 
                0xba2: MSTORE vba0(0x0), vb31(0x1)
                0xba3: vba3(0x20) = CONST 
                0xba5: vba5(0x0) = CONST 
                0xba7: vba7 = SHA3 vba5(0x0), vba3(0x20)

                Begin block 0xba9
                prev=[0xb9b, 0xba9], succ=[0xba9, 0xbbd]
                =================================
                0xba9_0x0: vba9_0 = PHI vb65, vbb5
                0xba9_0x1: vba9_1 = PHI vba7, vbb1
                0xbab: vbab = SLOAD vba9_1
                0xbad: MSTORE vba9_0, vbab
                0xbaf: vbaf(0x1) = CONST 
                0xbb1: vbb1 = ADD vbaf(0x1), vba9_1
                0xbb3: vbb3(0x20) = CONST 
                0xbb5: vbb5 = ADD vbb3(0x20), vba9_0
                0xbb8: vbb8 = GT vb9d, vbb5
                0xbb9: vbb9(0xba9) = CONST 
                0xbbc: JUMPI vbb9(0xba9), vbb8

                Begin block 0xbbd
                prev=[0xba9], succ=[0xbc6]
                =================================
                0xbbf: vbbf = SUB vbb5, vb9d
                0xbc0: vbc0(0x1f) = CONST 
                0xbc2: vbc2 = AND vbc0(0x1f), vbbf
                0xbc4: vbc4 = ADD vb9d, vbc2

                Begin block 0xbc6
                prev=[0xbbd], succ=[]
                =================================
                0xbcd: RETURNPRIVATE vb30arg0, vb55, vb30arg0

            }


            function name()() public {
                Begin block 0xb9
                prev=[], succ=[0xc0, 0xc4]
                =================================
                0xba: vba = CALLVALUE 
                0xbb: vbb = ISZERO vba
                0xbc: vbc(0xc4) = CONST 
                0xbf: JUMPI vbc(0xc4), vbb

                Begin block 0xc0
                prev=[0xb9], succ=[]
                =================================
                0xc0: vc0(0x0) = CONST 
                0xc3: REVERT vc0(0x0), vc0(0x0)

                Begin block 0xc4
                prev=[0xb9], succ=[0xcc]
                =================================
                0xc5: vc5(0xcc) = CONST 
                0xc8: vc8(0x4dd) = CONST 
                0xcb: vcb_0, vcb_1 = CALLPRIVATE vc8(0x4dd), vc5(0xcc)

                Begin block 0xcc
                prev=[0xc4], succ=[0xf1]
                =================================
                0xcd: vcd(0x40) = CONST 
                0xcf: vcf = MLOAD vcd(0x40)
                0xd2: vd2(0x20) = CONST 
                0xd4: vd4 = ADD vd2(0x20), vcf
                0xd7: vd7(0x20) = SUB vd4, vcf
                0xd9: MSTORE vcf, vd7(0x20)
                0xdd: vdd = MLOAD vcb_0
                0xdf: MSTORE vd4, vdd
                0xe0: ve0(0x20) = CONST 
                0xe2: ve2 = ADD ve0(0x20), vd4
                0xe6: ve6 = MLOAD vcb_0
                0xe8: ve8(0x20) = CONST 
                0xea: vea = ADD ve8(0x20), vcb_0
                0xef: vef(0x0) = CONST 

                Begin block 0xf1
                prev=[0xcc, 0xfa], succ=[0x10c, 0xfa]
                =================================
                0xf1_0x0: vf1_0 = PHI vef(0x0), v105
                0xf4: vf4 = LT vf1_0, ve6
                0xf5: vf5 = ISZERO vf4
                0xf6: vf6(0x10c) = CONST 
                0xf9: JUMPI vf6(0x10c), vf5

                Begin block 0x10c
                prev=[0xf1], succ=[0x139, 0x120]
                =================================
                0x115: v115 = ADD ve6, ve2
                0x117: v117(0x1f) = CONST 
                0x119: v119 = AND v117(0x1f), ve6
                0x11b: v11b = ISZERO v119
                0x11c: v11c(0x139) = CONST 
                0x11f: JUMPI v11c(0x139), v11b

                Begin block 0x139
                prev=[0x10c, 0x120], succ=[]
                =================================
                0x139_0x1: v139_1 = PHI v115, v136
                0x13f: v13f(0x40) = CONST 
                0x141: v141 = MLOAD v13f(0x40)
                0x144: v144 = SUB v139_1, v141
                0x146: RETURN v141, v144

                Begin block 0x120
                prev=[0x10c], succ=[0x139]
                =================================
                0x122: v122 = SUB v115, v119
                0x124: v124 = MLOAD v122
                0x125: v125(0x1) = CONST 
                0x128: v128(0x20) = CONST 
                0x12a: v12a = SUB v128(0x20), v119
                0x12b: v12b(0x100) = CONST 
                0x12e: v12e = EXP v12b(0x100), v12a
                0x12f: v12f = SUB v12e, v125(0x1)
                0x130: v130 = NOT v12f
                0x131: v131 = AND v130, v124
                0x133: MSTORE v122, v131
                0x134: v134(0x20) = CONST 
                0x136: v136 = ADD v134(0x20), v122

                Begin block 0xfa
                prev=[0xf1], succ=[0xf1]
                =================================
                0xfa_0x0: vfa_0 = PHI vef(0x0), v105
                0xfc: vfc = ADD vea, vfa_0
                0xfd: vfd = MLOAD vfc
                0x100: v100 = ADD ve2, vfa_0
                0x101: MSTORE v100, vfd
                0x102: v102(0x20) = CONST 
                0x105: v105 = ADD vfa_0, v102(0x20)
                0x108: v108(0xf1) = CONST 
                0x10b: JUMP v108(0xf1)

            }

        yul:
          title: Yul
          type: string
          example: |
            // Decompiled by library.dedaub.com
            // 2023.10.18 09:17 UTC

            object "contract" {
                code { }
                object "runtime" {
                    code {
                            mstore(0x40, 0x60)
                            let _0 := lt(calldatasize(), 0x4)                
                            if not(_0){
                                let _1 := and(0xffffffff, div(calldataload(0x0), 0x100000000000000000000000000000000000000000000000000000000))                    
                                let _2 := eq(0x6fdde03, _1)                    
                                switch _1
                                    case 0x6fdde03{
                                        func_name()
                                    }
                                    case 0x95ea7b3{
                                        func_approve()
                                    }
                                    case 0x18160ddd{
                                        func_totalSupply()
                                    }
                                    case 0x23b872dd{
                                        func_transferFrom()
                                    }
                                    case 0x2e1a7d4d{
                                        func_withdraw()
                                    }
                                    case 0x313ce567{
                                        func_decimals()
                                    }
                                    case 0x70a08231{
                                        func_balanceOf()
                                    }
                                    case 0x95d89b41{
                                        func_symbol()
                                    }
                                    case 0xa9059cbb{
                                        func_transfer()
                                    }
                                    case 0xd0e30db0{
                                        func_deposit()
                                    }
                                    case 0xdd62ed3e{
                                        func_allowance()
                                    }
                                    default { }
                            }
                            func_ROOT4146650865()
                        function func_0x4dd(_3)  -> ret_val_0, ret_val_1 {
                                let _4 := 0x0                    
                                let _5 := sload(0x0)                    
                                let _6 := div(and(sub(mul(0x100, iszero(and(0x1, _5))), 0x1), _5), 0x2)                    
                                let _7 := mload(0x40)                    
                                mstore(0x40, add(_7, add(0x20, mul(div(add(0x1f, _6), 0x20), 0x20))))
                                mstore(_7, _6)
                                let _8 := add(0x20, _7)                    
                                let _9 := _8                    
                                let _10 := sload(0x0)                    
                                let _11 := div(and(sub(mul(0x100, iszero(and(0x1, _10))), 0x1), _10), 0x2)                    
                                let _12 := iszero(_11)                    
                                if _12{
                                    ret_val_0 := _7                        
                                    ret_val_1 := _3                        
                                    leave
                                }
                                if not(_12){
                                    let _13 := lt(0x1f, _11)                        
                                    if _13{
                                        let _14 := add(_8, _11)                            
                                        mstore(0x0, 0x0)
                                        let _15 := keccak256(0x0, 0x20)                            
                                        for {
                                            let _16 := 0x1                                
                                            let _17 := add(_16, _15)                                
                                            let _18 := 0x20                                
                                            _4 := add(_18, _9)                                
                                        }
                                        gt(_14, _4)                            
                                        { }
                                        {
                                            _9 := _4                                
                                            _15 := _17                                
                                            let _19 := sload(_15)                                
                                            mstore(_9, _19)
                                            _16 := 0x1                                
                                            _17 := add(_16, _15)                                
                                            _15 := _17                                
                                            _18 := 0x20                                
                                            _4 := add(_18, _9)                                
                                            _9 := _4                                
                                            let _20 := gt(_14, _4)                                
                                        }
                                        let _21 := add(_14, and(0x1f, sub(_4, _14)))                            
                                        leave
                                    }
                                    if not(_13){
                                        let _22 := sload(0x0)                            
                                        mstore(_8, mul(div(_22, 0x100), 0x100))
                                        let _23 := add(0x20, _8)                            
                                        leave
                                    }
                                }
                            }
                        function func_0x68c(_24, _25, _26, _27)  -> ret_val_0 {
                                mstore(0x0, and(0xffffffffffffffffffffffffffffffffffffffff, and(0xffffffffffffffffffffffffffffffffffffffff, _26)))
                                let _28 := add(0x20, 0x0)                    
                                mstore(_28, 0x3)
                                let _29 := sload(keccak256(0x0, add(0x20, _28)))                    
                                let _30 := iszero(iszero(iszero(lt(_29, _24))))                    
                                require(not(_30))
                                let _31 := iszero(eq(and(0xffffffffffffffffffffffffffffffffffffffff, _26), and(0xffffffffffffffffffffffffffffffffffffffff, caller())))                    
                                let _32 := _31                    
                                let _33 := iszero(_31)                    
                                if not(_33){
                                    mstore(0x0, and(0xffffffffffffffffffffffffffffffffffffffff, and(0xffffffffffffffffffffffffffffffffffffffff, _26)))
                                    let _34 := add(0x20, 0x0)                        
                                    mstore(_34, 0x4)
                                    mstore(0x0, and(0xffffffffffffffffffffffffffffffffffffffff, and(0xffffffffffffffffffffffffffffffffffffffff, caller())))
                                    let _35 := add(0x20, 0x0)                        
                                    mstore(_35, keccak256(0x0, add(0x20, _34)))
                                    let _36 := sload(keccak256(0x0, add(0x20, _35)))                        
                                    _32 := iszero(eq(_36, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))                        
                                }
                                let _37 := iszero(_32)                    
                                if not(_37){
                                    mstore(0x0, and(0xffffffffffffffffffffffffffffffffffffffff, and(0xffffffffffffffffffffffffffffffffffffffff, _26)))
                                    let _38 := add(0x20, 0x0)                        
                                    mstore(_38, 0x4)
                                    mstore(0x0, and(0xffffffffffffffffffffffffffffffffffffffff, and(0xffffffffffffffffffffffffffffffffffffffff, caller())))
                                    let _39 := add(0x20, 0x0)                        
                                    mstore(_39, keccak256(0x0, add(0x20, _38)))
                                    let _40 := sload(keccak256(0x0, add(0x20, _39)))                        
                                    let _41 := iszero(iszero(iszero(lt(_40, _24))))                        
                                    require(not(_41))
                                    mstore(0x0, and(0xffffffffffffffffffffffffffffffffffffffff, and(0xffffffffffffffffffffffffffffffffffffffff, _26)))
                                    let _42 := add(0x20, 0x0)                        
                                    mstore(_42, 0x4)
                                    mstore(0x0, and(0xffffffffffffffffffffffffffffffffffffffff, and(0xffffffffffffffffffffffffffffffffffffffff, caller())))
                                    let _43 := add(0x20, 0x0)                        
                                    mstore(_43, keccak256(0x0, add(0x20, _42)))
                                    let _44 := keccak256(0x0, add(0x20, _43))                        
                                    let _45 := sload(_44)                        
                                    sstore(_44, sub(_45, _24))
                                }
                                mstore(0x0, and(0xffffffffffffffffffffffffffffffffffffffff, and(0xffffffffffffffffffffffffffffffffffffffff, _26)))
                                let _46 := add(0x20, 0x0)                    
                                mstore(_46, 0x3)
                                let _47 := keccak256(0x0, add(0x20, _46))                    
                                let _48 := sload(_47)                    
                                sstore(_47, sub(_48, _24))
                                mstore(0x0, and(0xffffffffffffffffffffffffffffffffffffffff, and(0xffffffffffffffffffffffffffffffffffffffff, _25)))
                                let _49 := add(0x20, 0x0)                    
                                mstore(_49, 0x3)
                                let _50 := keccak256(0x0, add(0x20, _49))                    
                                let _51 := sload(_50)                    
                                sstore(_50, add(_51, _24))
                                let _52 := mload(0x40)                    
                                mstore(_52, _24)
                                let _53 := mload(0x40)                    
                                log3(_53, sub(add(0x20, _52), _53), 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, and(0xffffffffffffffffffffffffffffffffffffffff, _26), and(0xffffffffffffffffffffffffffffffffffffffff, _25))
                                ret_val_0 := 0x1                    
                                leave
                            }
                        function func_0xb30(_54)  -> ret_val_0, ret_val_1 {
                                let _55 := 0x0                    
                                let _56 := sload(0x1)                    
                                let _57 := div(and(sub(mul(0x100, iszero(and(0x1, _56))), 0x1), _56), 0x2)                    
                                let _58 := mload(0x40)                    
                                mstore(0x40, add(_58, add(0x20, mul(div(add(0x1f, _57), 0x20), 0x20))))
                                mstore(_58, _57)
                                let _59 := add(0x20, _58)                    
                                let _60 := _59                    
                                let _61 := sload(0x1)                    
                                let _62 := div(and(sub(mul(0x100, iszero(and(0x1, _61))), 0x1), _61), 0x2)                    
                                let _63 := iszero(_62)                    
                                if _63{
                                    ret_val_0 := _58                        
                                    ret_val_1 := _54                        
                                    leave
                                }
                                if not(_63){
                                    let _64 := lt(0x1f, _62)                        
                                    if _64{
                                        let _65 := add(_59, _62)                            
                                        mstore(0x0, 0x1)
                                        let _66 := keccak256(0x0, 0x20)                            
                                        for {
                                            let _67 := 0x1                                
                                            let _68 := add(_67, _66)                                
                                            let _69 := 0x20                                
                                            _55 := add(_69, _60)                                
                                        }
                                        gt(_65, _55)                            
                                        { }
                                        {
                                            _60 := _55                                
                                            _66 := _68                                
                                            let _70 := sload(_66)                                
                                            mstore(_60, _70)
                                            _67 := 0x1                                
                                            _68 := add(_67, _66)                                
                                            _66 := _68                                
                                            _69 := 0x20                                
                                            _55 := add(_69, _60)                                
                                            _60 := _55                                
                                            let _71 := gt(_65, _55)                                
                                        }
                                        let _72 := add(_65, and(0x1f, sub(_55, _65)))                            
                                        leave
                                    }
                                    if not(_64){
                                        let _73 := sload(0x1)                            
                                        mstore(_59, mul(div(_73, 0x100), 0x100))
                                        let _74 := add(0x20, _59)                            
                                        leave
                                    }
                                }
                            }
                        function func_name() {
                                let _75 := iszero(callvalue())                    
                                require(not(_75))
                                let _76, _77 := func_0x4dd(0xcc)                    
                                let _78 := mload(0x40)                    
                                let _79 := add(0x20, _78)                    
                                mstore(_78, sub(_79, _78))
                                let _80 := mload(_76)                    
                                mstore(_79, _80)
                                let _81 := add(0x20, _79)                    
                                let _82 := mload(_76)                    
                                let _83 := 0x0                    
                                let _84 := 0x0                    
                                for {
                                    let _86 := 0x20                        
                                    let _87 := add(_84, _86)                        
                                    let _85 := lt(_83, _82)                        
                                }
                                not(iszero(_85))                    
                                { }
                                {
                                    _83 := _87                        
                                    _85 := lt(_83, _82)                        
                                    let _88 := not(iszero(_85))                        
                                    _84 := _87                        
                                    let _89 := mload(add(add(0x20, _76), _84))                        
                                    mstore(add(_81, _84), _89)
                                    _86 := 0x20                        
                                    _87 := add(_84, _86)                        
                                    _83 := _87                        
                                    _84 := _87                        
                                }
                                let _90 := add(_82, _81)                    
                                let _91 := _90                    
                                let _92 := and(0x1f, _82)                    
                                let _93 := iszero(_92)                    
                                if not(_93){
                                    let _94 := sub(_90, _92)                        
                                    let _95 := mload(_94)                        
                                    mstore(_94, and(not(sub(exp(0x100, sub(0x20, _92)), 0x1)), _95))
                                    _91 := add(0x20, _94)                        
                                }
                                let _96 := mload(0x40)                    
                                return(_96, sub(_91, _96))
                            }
                        function func_approve() {
                                let _97 := iszero(callvalue())                    
                                require(not(_97))
                                let _98 := and(0xffffffffffffffffffffffffffffffffffffffff, calldataload(0x4))                    
                                let _99 := add(0x20, 0x4)                    
                                let _100 := calldataload(_99)                    
                                let _101 := add(0x20, _99)                    
                                mstore(0x0, and(0xffffffffffffffffffffffffffffffffffffffff, and(0xffffffffffffffffffffffffffffffffffffffff, caller())))
                                let _102 := add(0x20, 0x0)                    
                                mstore(_102, 0x4)
                                mstore(0x0, and(0xffffffffffffffffffffffffffffffffffffffff, and(0xffffffffffffffffffffffffffffffffffffffff, _98)))
                                let _103 := add(0x20, 0x0)                    
                                mstore(_103, keccak256(0x0, add(0x20, _102)))
                                sstore(keccak256(0x0, add(0x20, _103)), _100)
                                let _104 := mload(0x40)                    
                                mstore(_104, _100)
                                let _105 := mload(0x40)                    
                                log3(_105, sub(add(0x20, _104), _105), 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, and(0xffffffffffffffffffffffffffffffffffffffff, caller()), and(0xffffffffffffffffffffffffffffffffffffffff, _98))
                                let _106 := mload(0x40)                    
                                mstore(_106, iszero(iszero(iszero(iszero(0x1)))))
                                let _107 := mload(0x40)                    
                                return(_107, sub(add(0x20, _106), _107))
                            }
                        function func_totalSupply() {
                                let _108 := iszero(callvalue())                    
                                require(not(_108))
                                let _109 := balance(and(0xffffffffffffffffffffffffffffffffffffffff, address()))                    
                                let _110 := mload(0x40)                    
                                mstore(_110, _109)
                                let _111 := mload(0x40)                    
                                return(_111, sub(add(0x20, _110), _111))
                            }
                        function func_transferFrom() {
                                let _112 := iszero(callvalue())                    
                                require(not(_112))
                                let _113 := add(0x20, 0x4)                    
                                let _114 := add(0x20, _113)                    
                                let _115 := add(0x20, _114)                    
                                let _116 := mload(0x40)                    
                                mstore(_116, iszero(iszero(iszero(iszero(func_0x68c(calldataload(_114), and(0xffffffffffffffffffffffffffffffffffffffff, calldataload(_113)), and(0xffffffffffffffffffffffffffffffffffffffff, calldataload(0x4)), 0x229))))))
                                let _117 := mload(0x40)                    
                                return(_117, sub(add(0x20, _116), _117))
                            }
                        function func_withdraw() {
                                let _118 := iszero(callvalue())                    
                                require(not(_118))
                                let _119 := calldataload(0x4)                    
                                let _120 := add(0x20, 0x4)                    
                                mstore(0x0, and(0xffffffffffffffffffffffffffffffffffffffff, and(0xffffffffffffffffffffffffffffffffffffffff, caller())))
                                let _121 := add(0x20, 0x0)                    
                                mstore(_121, 0x3)
                                let _122 := sload(keccak256(0x0, add(0x20, _121)))                    
                                let _123 := iszero(iszero(iszero(lt(_122, _119))))                    
                                require(not(_123))
                                mstore(0x0, and(0xffffffffffffffffffffffffffffffffffffffff, and(0xffffffffffffffffffffffffffffffffffffffff, caller())))
                                let _124 := add(0x20, 0x0)                    
                                mstore(_124, 0x3)
                                let _125 := keccak256(0x0, add(0x20, _124))                    
                                let _126 := sload(_125)                    
                                sstore(_125, sub(_126, _119))
                                let _127 := mload(0x40)                    
                                let _128 := mload(0x40)                    
                                let _129 := call(mul(iszero(_119), 0x8fc), and(0xffffffffffffffffffffffffffffffffffffffff, caller()), _119, _128, sub(_127, _128), _128, 0x0)                    
                                let _130 := iszero(iszero(_129))                    
                                require(not(_130))
                                let _131 := mload(0x40)                    
                                mstore(_131, _119)
                                let _132 := mload(0x40)                    
                                log2(_132, sub(add(0x20, _131), _132), 0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65, and(0xffffffffffffffffffffffffffffffffffffffff, caller()))
                                stop()
                            }
                        function func_decimals() {
                                let _133 := iszero(callvalue())                    
                                require(not(_133))
                                let _134 := sload(0x2)                    
                                let _135 := mload(0x40)                    
                                mstore(_135, and(0xff, and(0xff, and(0xff, div(_134, exp(0x100, 0x0))))))
                                let _136 := mload(0x40)                    
                                return(_136, sub(add(0x20, _135), _136))
                            }
                        function func_balanceOf() {
                                let _137 := iszero(callvalue())                    
                                require(not(_137))
                                let _138 := add(0x20, 0x4)                    
                                mstore(0x20, 0x3)
                                mstore(0x0, and(0xffffffffffffffffffffffffffffffffffffffff, calldataload(0x4)))
                                let _139 := sload(keccak256(0x0, 0x40))                    
                                let _140 := mload(0x40)                    
                                mstore(_140, _139)
                                let _141 := mload(0x40)                    
                                return(_141, sub(add(0x20, _140), _141))
                            }
                        function func_symbol() {
                                let _142 := iszero(callvalue())                    
                                require(not(_142))
                                let _143, _144 := func_0xb30(0x2f5)                    
                                let _145 := mload(0x40)                    
                                let _146 := add(0x20, _145)                    
                                mstore(_145, sub(_146, _145))
                                let _147 := mload(_143)                    
                                mstore(_146, _147)
                                let _148 := add(0x20, _146)                    
                                let _149 := mload(_143)                    
                                let _150 := 0x0                    
                                let _151 := 0x0                    
                                for {
                                    let _152 := lt(_150, _149)                        
                                    let _153 := 0x20                        
                                    let _154 := add(_151, _153)                        
                                }
                                not(iszero(_152))                    
                                { }
                                {
                                    _150 := _154                        
                                    _152 := lt(_150, _149)                        
                                    let _155 := not(iszero(_152))                        
                                    _151 := _154                        
                                    let _156 := mload(add(add(0x20, _143), _151))                        
                                    mstore(add(_148, _151), _156)
                                    _153 := 0x20                        
                                    _154 := add(_151, _153)                        
                                    _150 := _154                        
                                    _151 := _154                        
                                }
                                let _157 := add(_149, _148)                    
                                let _158 := _157                    
                                let _159 := and(0x1f, _149)                    
                                let _160 := iszero(_159)                    
                                if not(_160){
                                    let _161 := sub(_157, _159)                        
                                    let _162 := mload(_161)                        
                                    mstore(_161, and(not(sub(exp(0x100, sub(0x20, _159)), 0x1)), _162))
                                    _158 := add(0x20, _161)                        
                                }
                                let _163 := mload(0x40)                    
                                return(_163, sub(_158, _163))
                            }
                        function func_transfer() {
                                let _164 := iszero(callvalue())                    
                                require(not(_164))
                                let _165 := add(0x20, 0x4)                    
                                let _166 := add(0x20, _165)                    
                                let _167 := mload(0x40)                    
                                mstore(_167, iszero(iszero(iszero(iszero(func_0x68c(calldataload(_165), and(0xffffffffffffffffffffffffffffffffffffffff, calldataload(0x4)), caller(), 0xbdb))))))
                                let _168 := mload(0x40)                    
                                return(_168, sub(add(0x20, _167), _168))
                            }
                        function func_allowance() {
                                let _169 := iszero(callvalue())                    
                                require(not(_169))
                                let _170 := add(0x20, 0x4)                    
                                let _171 := add(0x20, _170)                    
                                mstore(0x20, 0x4)
                                mstore(0x0, and(0xffffffffffffffffffffffffffffffffffffffff, calldataload(0x4)))
                                mstore(0x20, keccak256(0x0, 0x40))
                                mstore(0x0, and(0xffffffffffffffffffffffffffffffffffffffff, calldataload(_170)))
                                let _172 := sload(keccak256(0x0, 0x40))                    
                                let _173 := mload(0x40)                    
                                mstore(_173, _172)
                                let _174 := mload(0x40)                    
                                return(_174, sub(add(0x20, _173), _174))
                            }
                        function func_ROOT4146650865() {
                                mstore(0x0, and(0xffffffffffffffffffffffffffffffffffffffff, and(0xffffffffffffffffffffffffffffffffffffffff, caller())))
                                let _175 := add(0x20, 0x0)                    
                                mstore(_175, 0x3)
                                let _176 := keccak256(0x0, add(0x20, _175))                    
                                let _177 := sload(_176)                    
                                sstore(_176, add(_177, callvalue()))
                                let _178 := mload(0x40)                    
                                mstore(_178, callvalue())
                                let _179 := mload(0x40)                    
                                log2(_179, sub(add(0x20, _178), _179), 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, and(0xffffffffffffffffffffffffffffffffffffffff, caller()))
                                stop()
                            }
                        function func_deposit() {
                                mstore(0x0, and(0xffffffffffffffffffffffffffffffffffffffff, and(0xffffffffffffffffffffffffffffffffffffffff, caller())))
                                let _180 := add(0x20, 0x0)                    
                                mstore(_180, 0x3)
                                let _181 := keccak256(0x0, add(0x20, _180))                    
                                let _182 := sload(_181)                    
                                sstore(_181, add(_182, callvalue()))
                                let _183 := mload(0x40)                    
                                mstore(_183, callvalue())
                                let _184 := mload(0x40)                    
                                log2(_184, sub(add(0x20, _183), _184), 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, and(0xffffffffffffffffffffffffffffffffffffffff, caller()))
                                stop()
                            }
                        function require(condition) {
                                if iszero(condition){
                                    revert(0x0, 0x0)
                                }
                            }
                    }
                }
            }
        source:
          title: Source
          type: string
          example: >-
            // Decompiled by library.dedaub.com

            // 2024.04.15 00:24 UTC

            // Compiled using the solidity compiler version 0.4.7<=v<0.5.9



            // Data structures and variables inferred from the use of storage
            instructions

            uint256[] array_0; // STORAGE[0x0]

            uint256[] array_1; // STORAGE[0x1]

            mapping (uint256 => uint256) _fallback; // STORAGE[0x3]

            mapping (uint256 => mapping (uint256 => uint256)) owner_4; //
            STORAGE[0x4]

            uint8 ___function_selector__; // STORAGE[0x2] bytes 0 to 0



            // Events

            Deposit(address, uint256);

            Approval(address, address, uint256);

            Transfer(address, address, uint256);

            Withdrawal(address, uint256);


            function 0x4dd() private { 
                v0 = new bytes[](((!(0x1 & array_0.length) << 8) - 1 & array_0.length) >> 1);
                v1 = v2 = v0.data;
                if (!(((!(0x1 & array_0.length) << 8) - 1 & array_0.length) >> 1)) {
                    return v0, v3;
                } else if (31 < ((!(0x1 & array_0.length) << 8) - 1 & array_0.length) >> 1) {
                    v4 = v5 = array_0.data;
                    do {
                        MEM[v1] = STORAGE[v4];
                        v4 += 1;
                        v1 += 32;
                    } while (v2 + (((!(0x1 & array_0.length) << 8) - 1 & array_0.length) >> 1) <= v1);
                    return v0, v3;
                } else {
                    MEM[v2] = array_0.length >> 8 << 8;
                    return v0, v3;
                }
            }


            function 0x68c(uint256 varg0, address varg1, address varg2) private
            { 
                require(_fallback[varg2] >= varg0);
                v0 = v1 = varg2 != msg.sender;
                if (varg2 != msg.sender) {
                    v0 = v2 = owner_4[varg2][msg.sender] != uint256.max;
                }
                if (v0) {
                    require(owner_4[varg2][msg.sender] >= varg0);
                    owner_4[varg2][msg.sender] = owner_4[varg2][msg.sender] - varg0;
                }
                _fallback[varg2] = _fallback[varg2] - varg0;
                _fallback[varg1] = _fallback[varg1] + varg0;
                emit Transfer(varg2, varg1, varg0);
                return 1;
            }


            function function_selector() public payable { 
                _fallback[msg.sender] = _fallback[msg.sender] + msg.value;
                emit Deposit(msg.sender, msg.value);
            }


            function 0xb30() private { 
                v0 = new bytes[](((!(0x1 & array_1.length) << 8) - 1 & array_1.length) >> 1);
                v1 = v2 = v0.data;
                if (!(((!(0x1 & array_1.length) << 8) - 1 & array_1.length) >> 1)) {
                    return v0, v3;
                } else if (31 < ((!(0x1 & array_1.length) << 8) - 1 & array_1.length) >> 1) {
                    v4 = v5 = array_1.data;
                    do {
                        MEM[v1] = STORAGE[v4];
                        v4 += 1;
                        v1 += 32;
                    } while (v2 + (((!(0x1 & array_1.length) << 8) - 1 & array_1.length) >> 1) <= v1);
                    return v0, v3;
                } else {
                    MEM[v2] = array_1.length >> 8 << 8;
                    return v0, v3;
                }
            }


            // Note: The function selector is not present in the original
            solidity code.

            // However, we display it for the sake of completeness.


            function function_selector(bytes4 function_selector, uint256 varg1,
            uint256 varg2, uint256 varg3) public payable { 
                MEM[64] = 96;
                if (msg.data.length >= 4) {
                    if (0x6fdde03 == uint32(function_selector >> 224)) {
                        require(!msg.value);
                        v0, v1 = 0x4dd();
                        v2 = new bytes[](v0.length);
                        v3 = v4 = 0;
                        while (v3 < v0.length) {
                            v2[v3] = v0[v3];
                            v3 = v3 + 32;
                        }
                        v5 = v6 = v0.length + v2.data;
                        if (0x1f & v0.length) {
                            MEM[v6 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v6 - (0x1f & v0.length)];
                        }
                        return v2;
                    } else if (0x95ea7b3 == uint32(function_selector >> 224)) {
                        require(!msg.value);
                        owner_4[msg.sender][address(varg1)] = varg2;
                        emit Approval(msg.sender, address(varg1), varg2);
                        return True;
                    } else if (0x18160ddd == uint32(function_selector >> 224)) {
                        require(!msg.value);
                        return (address(this)).balance;
                    } else if (0x23b872dd == uint32(function_selector >> 224)) {
                        require(!msg.value);
                        v7 = 0x68c(varg3, address(varg2), address(varg1));
                        return bool(v7);
                    } else if (0x2e1a7d4d == uint32(function_selector >> 224)) {
                        require(!msg.value);
                        require(_fallback[msg.sender] >= varg1);
                        _fallback[msg.sender] = _fallback[msg.sender] - varg1;
                        v8 = msg.sender.call().value(varg1).gas(!varg1 * 2300);
                        require(bool(v8));
                        emit Withdrawal(msg.sender, varg1);
                        exit;
                    } else if (0x313ce567 == uint32(function_selector >> 224)) {
                        require(!msg.value);
                        return ___function_selector__;
                    } else if (0x70a08231 == uint32(function_selector >> 224)) {
                        require(!msg.value);
                        return _fallback[address(varg1)];
                    } else if (0x95d89b41 == uint32(function_selector >> 224)) {
                        require(!msg.value);
                        v9, v10 = 0xb30();
                        v11 = new bytes[](v9.length);
                        v12 = v13 = 0;
                        while (v12 < v9.length) {
                            v11[v12] = v9[v12];
                            v12 = v12 + 32;
                        }
                        v14 = v15 = v9.length + v11.data;
                        if (0x1f & v9.length) {
                            MEM[v15 - (0x1f & v9.length)] = ~(256 ** (32 - (0x1f & v9.length)) - 1) & MEM[v15 - (0x1f & v9.length)];
                        }
                        return v11;
                    } else if (0xa9059cbb == uint32(function_selector >> 224)) {
                        require(!msg.value);
                        v16 = 0x68c(varg2, address(varg1), msg.sender);
                        return bool(v16);
                    } else if (0xd0e30db0 == uint32(function_selector >> 224)) {
                        _fallback[msg.sender] = _fallback[msg.sender] + msg.value;
                        emit Deposit(msg.sender, msg.value);
                        exit;
                    } else if (0xdd62ed3e == uint32(function_selector >> 224)) {
                        require(!msg.value);
                        return owner_4[address(varg1)][address(varg2)];
                    }
                }
                fallback();
            }
    HTTPValidationError:
      title: HTTPValidationError
      type: object
      properties:
        detail:
          title: Detail
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    ValidationError:
      title: ValidationError
      required:
        - loc
        - msg
        - type
      type: object
      properties:
        loc:
          title: Location
          type: array
          items:
            anyOf:
              - type: string
              - type: integer
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
  securitySchemes:
    OAuth2AuthorizationCodeBearer:
      type: oauth2
      flows:
        authorizationCode:
          refreshUrl: https://auth.dedaub.com/realms/dedaub/protocol/openid-connect/token
          scopes: {}
          authorizationUrl: https://auth.dedaub.com/realms/dedaub/protocol/openid-connect/auth
          tokenUrl: https://auth.dedaub.com/realms/dedaub/protocol/openid-connect/token
    APIKeyHeader:
      type: apiKey
      description: API key
      in: header
      name: x-api-key
tags:
  - name: decompiler_api
    description: ' The Decompiler API consists of three parts. The [Decompile](https://api.dedaub.com/api/docs/#tag/decompiler_api/operation/decompile) endpoint accepts your bytecode via a POST request and returns an `md5_bytecode`, which is an `md5` hash of the binary representation of your submitted bytecode. You can use this returned `md5` (or compute it yourself) to poll the status of your decompilation using the [Status](https://api.dedaub.com/api/docs/#tag/decompiler_api/operation/get_on_demand_analysis_status) endpoint, which provides individual status updates. Finally, you can retrieve your decompiled code using [GetDecompilation](https://api.dedaub.com/api/docs/#tag/decompiler_api/operation/get_decompilation), which will provide all the representations we managed to reverse-engineer from your submitted binary. If you encounter any issues while using this API, please contact our support channel on [Discord](https://discord.com/invite/jSnED9pPJ4). Note that the decompiler is engineered to work only on EVM-equivelant binaries, contracts compiled for platforms such as ZKSync will not decompile successfully. '
