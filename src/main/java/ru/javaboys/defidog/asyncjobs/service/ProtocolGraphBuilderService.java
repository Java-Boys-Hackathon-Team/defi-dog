package ru.javaboys.defidog.asyncjobs.service;

import io.jmix.core.UnconstrainedDataManager;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import ru.javaboys.defidog.audit.service.ContractDependenciesGraphService;
import ru.javaboys.defidog.entity.AuditReport;
import ru.javaboys.defidog.entity.ContractDependenciesGraph;
import ru.javaboys.defidog.entity.Cryptocurrency;
import ru.javaboys.defidog.entity.DeFiProtocol;
import ru.javaboys.defidog.entity.SmartContract;
import ru.javaboys.defidog.entity.SourceCodeChangeSet;

@Slf4j
@Service
@RequiredArgsConstructor
public class ProtocolGraphBuilderService {

    private final UnconstrainedDataManager dataManager;
    private final ContractDependenciesGraphService contractDependenciesGraphService;

    public void buildGraphProtocol(AuditReport report, SourceCodeChangeSet changeSet) {
        String sourceCode = changeSet.getSourceCode().getLastKnownSourceCode();
        log.info("üîÑ –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è AuditReport ID: {}", report.getId());

        String jsonGraph = contractDependenciesGraphService.generateGraphJsonFromSource(sourceCode);
        log.info("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω JSON –≥—Ä–∞—Ñ: {}", jsonGraph);

        SmartContract contract = report.getSmartContract();

        if (contract == null) {
            log.warn("‚ö†Ô∏è –£ AuditReport ID: {} –Ω–µ –∑–∞–¥–∞–Ω SmartContract ‚Äî –ø—Ä–æ–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞", report.getId());
            return;
        }

        // –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞
        Cryptocurrency crypto = contract.getCryptocurrency();
        if (crypto != null) {
            ContractDependenciesGraph graph = crypto.getDependencyGraph() != null
                    ? crypto.getDependencyGraph()
                    : dataManager.create(ContractDependenciesGraph.class);
            graph.setGraphJson(jsonGraph);
            crypto.setDependencyGraph(graph);
            log.info("üì¶ –û–±–Ω–æ–≤–ª—ë–Ω/—Å–æ–∑–¥–∞–Ω –≥—Ä–∞—Ñ –¥–ª—è Cryptocurrency ID: {}", crypto.getId());
        }

        // DeFi-–ø—Ä–æ—Ç–æ–∫–æ–ª
        DeFiProtocol defi = contract.getDeFiProtocol();
        if (defi != null) {
            ContractDependenciesGraph graph = defi.getDependencyGraph() != null
                    ? defi.getDependencyGraph()
                    : dataManager.create(ContractDependenciesGraph.class);
            graph.setGraphJson(jsonGraph);
            defi.setDependencyGraph(graph);
            log.info("üì¶ –û–±–Ω–æ–≤–ª—ë–Ω/—Å–æ–∑–¥–∞–Ω –≥—Ä–∞—Ñ –¥–ª—è DeFiProtocol ID: {}", defi.getId());
        }
    }
}
