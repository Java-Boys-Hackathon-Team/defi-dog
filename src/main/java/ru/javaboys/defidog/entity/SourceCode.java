package ru.javaboys.defidog.entity;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

import org.springframework.data.annotation.CreatedBy;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedBy;
import org.springframework.data.annotation.LastModifiedDate;

import io.jmix.core.entity.annotation.JmixGeneratedValue;
import io.jmix.core.metamodel.annotation.Comment;
import io.jmix.core.metamodel.annotation.InstanceName;
import io.jmix.core.metamodel.annotation.JmixEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.Lob;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import lombok.Getter;
import lombok.Setter;

@JmixEntity
@Table(name = "SOURCE_CODE")
@Entity
@Getter
@Setter
public class SourceCode {
    @JmixGeneratedValue
    @Column(name = "ID", nullable = false)
    @Id
    private UUID id;

    @NotNull
    @Comment("Тип источника (GitHub, Etherscan, Sourcify, Bytecode)")
    @Column(name = "SOURCE_TYPE")
    private String sourceType;

    @InstanceName
    @Comment("URL к исходникам на GitHub")
    @Column(name = "REPO_URL")
    private String repoUrl;

    @Comment("Имя git-ветки в удаленном репозитории")
    @Column(name = "BRANCH")
    private String branch;

    @NotNull
    @Comment("Путь на диске к клонированному коду")
    @Column(name = "LOCAL_PATH")
    private String localPath;

    @Comment("Путь к файлу ABI в локальном репозитории")
    @Column(name = "ABI_FILE_PATH")
    private String abiFilePath;

    @Comment("Дата последнего обновления исходника")
    @Column(name = "FETCHED_AT")
    private OffsetDateTime fetchedAt;

    @Comment("Автоматически получен через Dedaub")
    @Column(name = "AUTO_GENERATED")
    private Boolean autoGenerated;

    @Comment("С какого коммита начинать сканирование безопасности")
    @Column(name = "SCAN_START_COMMIT_HASH")
    private String scanStartCommitHash;

    @Comment("SHA последнего коммита, полученного при обновлении исходного кода из удаленного репозитория")
    @Column(name = "LAST_COMMIT_SHA")
    private String lastCommitSha;

    @OneToMany(mappedBy = "sourceCode")
    private List<SourceCodeChangeSet> sourceCodeChanges;

    @OneToMany(mappedBy = "sourceCode")
    private List<AbiChangeSet> abiChanges;

    @OneToMany(mappedBy = "sources")
    private List<SmartContract> smartContracts;

    @Comment("Последний известный исходный код смарт-контракта или группы смартов")
    @Column(name = "LAST_KNOWN_SOURCE_CODE")
    @Lob
    private String lastKnownSourceCode;

    @Comment("Последний известный ABI смарт-контракта")
    @Column(name = "LAST_KNOWN_ABI")
    @Lob
    private String lastKnownAbi;

    @Comment("Результаты/логи последнего запуска джобы синхронизации исходного кода")
    @Column(name = "SYNC_JOB_RESULT")
    @Lob
    private String syncJobResult;

    @CreatedBy
    @Column(name = "CREATED_BY")
    private String createdBy;

    @CreatedDate
    @Column(name = "CREATED_DATE")
    private OffsetDateTime createdDate;

    @LastModifiedBy
    @Column(name = "LAST_MODIFIED_BY")
    private String lastModifiedBy;

    @LastModifiedDate
    @Column(name = "LAST_MODIFIED_DATE")
    private OffsetDateTime lastModifiedDate;

    @OneToOne(fetch = FetchType.LAZY, mappedBy = "sources")
    private DeFiProtocol deFiProtocol;

    @JoinTable(name = "SCAN_TOOL_SOURCE_CODE_LINK",
            joinColumns = @JoinColumn(name = "SOURCE_CODE_ID"),
            inverseJoinColumns = @JoinColumn(name = "SCAN_TOOL_ID"))
    @ManyToMany
    private List<ScanTool> scanTools;

    public SourceType getSourceType() {
        return sourceType == null ? null : SourceType.valueOf(sourceType);
    }

    public void setSourceType(SourceType sourceType) {
        this.sourceType = sourceType == null ? null : sourceType.getId();
    }
}
