package ru.javaboys.defidog.audit.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.ai.chat.messages.SystemMessage;
import org.springframework.ai.chat.messages.UserMessage;
import org.springframework.stereotype.Service;
import ru.javaboys.defidog.asyncjobs.util.CommonUtils;
import ru.javaboys.defidog.integrations.openai.OpenAiService;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@Slf4j
@Service
@RequiredArgsConstructor
public class ContractDependenciesGraphService {
    public static final String MERGE_GRAPHS_PROMPT = """
            –£ —Ç–µ–±—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ JSON-–≥—Ä–∞—Ñ–æ–≤ –≤—ã–∑–æ–≤–æ–≤ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Cytoscape.js.

            –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
            - –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—Å–µ –≥—Ä–∞—Ñ—ã –≤ –æ–¥–∏–Ω –æ–±—â–∏–π.
            - –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã —É–∑–ª–æ–≤ –∏ —Å–≤—è–∑–µ–π.
            - –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Cytoscape.js:
            {
              "elements": {
                "nodes": [
                  { "data": { "id": "contract_id_1", "label": "ContractName1" }},
                  ...
                ],
                "edges": [
                  { "data": { "source": "contract_id_1", "target": "contract_id_2" }},
                  ...
                ]
              }
            }

            ‚ö†Ô∏è –û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ –≤–∏–¥–µ JSON (–±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, markdown –∏–ª–∏ –ª–∏—à–Ω–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è).
            """;
    public static final String BUILD_GRAPH_FROM_CODE_PROMPT_TEMPLATE = """
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã Solidity –∏ –ø–æ—Å—Ç—Ä–æ–π –æ–±—â–∏–π –≥—Ä–∞—Ñ –≤—ã–∑–æ–≤–æ–≤ (calls/dependencies) –º–µ–∂–¥—É –Ω–∏–º–∏.

            –§–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ‚Äî —Å—Ç—Ä–æ–≥–æ JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ Cytoscape.js:
            {
              "elements": {
                "nodes": [
                  { "data": { "id": "contract_id_1", "label": "ContractName1" }},
                  ...
                ],
                "edges": [
                  { "data": { "source": "contract_id_1", "target": "contract_id_2" }},
                  ...
                ]
              }
            }

            ‚ö†Ô∏è –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–π –ø–æ—è—Å–Ω–µ–Ω–∏–π, –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, markdown (` ```json `) –∏–ª–∏ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON.

            –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥:
            %s
            """;

    private final OpenAiService openAiService;
    private final ObjectMapper objectMapper;

    private static final int DEFAULT_MAX_TOKENS_PER_BATCH = 3000;

    /**
     * –ü–æ–ª–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—â–µ–≥–æ –≥—Ä–∞—Ñ–∞ –∏–∑ –±–æ–ª—å—à–æ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞.
     */
    public String generateGraphJsonFromSource(String sourceCode) {
        List<String> contractBatches = CommonUtils.splitSolidityContractsInBatches(sourceCode, DEFAULT_MAX_TOKENS_PER_BATCH);

        log.info("–†–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ {} –±–∞—Ç—á–µ–π –ø–æ ~{} —Ç–æ–∫–µ–Ω–æ–≤", contractBatches.size(), DEFAULT_MAX_TOKENS_PER_BATCH);

        List<String> batchGraphs = new ArrayList<>();
        for (int i = 0; i < contractBatches.size(); i++) {
            String batch = contractBatches.get(i);
            log.info("üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ –¥–ª—è –±–∞—Ç—á–∞ #{}", i + 1);

            String graph = generateGraphForBatch(batch, i + 1, contractBatches.size());
            batchGraphs.add(graph);

            // –ñ—ë—Å—Ç–∫–∞—è –ø–∞—É–∑–∞ 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (–∏–ª–∏ –±–æ–ª—å—à–µ –µ—Å–ª–∏ –Ω–∞–¥–æ)
            sleepSafe(10000);
        }

        log.info("üõ†Ô∏è –°–∫–ª–µ–∏–≤–∞–µ–º {} –≥—Ä–∞—Ñ–æ–≤ –≤ –æ–¥–∏–Ω", batchGraphs.size());

        // –ü–µ—Ä–µ–¥ –º–µ—Ä–∂–µ–º —Ç–æ–∂–µ –ø–∞—É–∑–∞ (–µ—Å–ª–∏ –º–µ—Ä–∂ –±–æ–ª—å—à–æ–π ‚Äî –ª—É—á—à–µ –≤—ã–¥–µ—Ä–∂–∞—Ç—å)
        sleepSafe(15000);

        return mergeGraphsWithChatGpt(batchGraphs);
    }

    private void sleepSafe(long millis) {
        try {
            log.info("‚è∏ –ü–∞—É–∑–∞ {} –º—Å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è 429", millis);
            Thread.sleep(millis);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            log.warn("Thread interrupted –≤–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã");
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞ –¥–ª—è –±–∞—Ç—á–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤.
     * 
     * @param batchContracts —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞—Ç—á–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
     * @param batchNumber –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 1)
     * @param totalBatches –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π
     * @return JSON-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞
     */
    private String generateGraphForBatch(String batchContracts, int batchNumber, int totalBatches) {
        log.info("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á ‚Ññ {} –∏–∑ {}. –û—Å—Ç–∞–ª–æ—Å—å: {}",
                batchNumber, totalBatches, totalBatches - batchNumber);

        String conversationId = UUID.randomUUID().toString();
        String userMessage = BUILD_GRAPH_FROM_CODE_PROMPT_TEMPLATE.formatted(batchContracts);

        String response = openAiService.talkToChatGPT(
                conversationId,
                new SystemMessage("–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–Ω–∞–ª–∏–∑—É —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤."),
                new UserMessage(userMessage)
        );

        try {
            JsonNode jsonNode = objectMapper.readTree(response);
            log.info("–£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≥—Ä–∞—Ñ –¥–ª—è –±–∞—Ç—á–∞ ‚Ññ {}. –£–∑–ª–æ–≤: {}", batchNumber, jsonNode.at("/elements/nodes").size());
            return response;
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≥—Ä–∞—Ñ–∞ –æ—Ç OpenAI: {}", e.getMessage());
            return "{\"elements\":{\"nodes\":[],\"edges\":[]}}";
        }
    }

    /**
     * –°–∫–ª–µ–π–∫–∞ –≤—Å–µ—Ö –±–∞—Ç—á-–≥—Ä–∞—Ñ–æ–≤ –≤ –æ–¥–∏–Ω.
     */
    private String mergeGraphsWithChatGpt(List<String> graphs) {
        String conversationId = UUID.randomUUID().toString();
        StringBuilder prompt = new StringBuilder(MERGE_GRAPHS_PROMPT + "\n\n");

        for (int i = 0; i < graphs.size(); i++) {
            prompt.append("–ì—Ä–∞—Ñ #").append(i + 1).append(":\n").append(graphs.get(i)).append("\n\n");
        }

        String rowResponse = openAiService.talkToChatGPT(
                conversationId,
                new SystemMessage("–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–Ω–∞–ª–∏–∑—É –≥—Ä–∞—Ñ–æ–≤ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤."),
                new UserMessage(prompt.toString())
        );

        String response = cleanGptJsonResponse(rowResponse);

        try {
            JsonNode jsonNode = objectMapper.readTree(response);
            log.info("–£—Å–ø–µ—à–Ω–æ —Å–∫–ª–µ–µ–Ω –æ–±—â–∏–π –≥—Ä–∞—Ñ. –£–∑–ª–æ–≤: {}", jsonNode.at("/elements/nodes").size());
            return response;
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ –æ—Ç OpenAI: {}", e.getMessage());
            return "{\"elements\":{\"nodes\":[],\"edges\":[]}}";
        }
    }

    private String cleanGptJsonResponse(String gptResponse) {
        if (gptResponse == null) {
            return "";
        }
        // –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü markdown, –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        return gptResponse
                .replaceAll("(?i)^\\s*```(?:json)?\\s*", "")
                .replaceAll("(?i)\\s*```\\s*$", "")
                .trim();
    }
}
