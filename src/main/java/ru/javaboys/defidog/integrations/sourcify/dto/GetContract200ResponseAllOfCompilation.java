/*
 * Sourcify APIv2
 * Welcome to the Sourcify's APIv2.  Important differences between the deprecated legacy API and the new APIv2: - **Ticketing**: The verfication requests resolve into tickets/verification jobs.    - Previously the verification happened during the HTTP request, which resulted in timeouts if compilation took longer - **Standard JSON as default**: In the current design we take the standard JSON format as our main verification endpoint. We still support verification with metadata at `/v2/verify/metadata`. - **Lean API**: We keep the number of endpoints minimal compared to v1. We won't have a session API.  - **Detailed contract response**: Prev. we only returned contract files of a contract. Now we can return details at `/contract/{chainId}/{address}`.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@sourcify.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.javaboys.defidog.integrations.sourcify.dto;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

import java.util.Objects;

/**
 * GetContract200ResponseAllOfCompilation
 */
@JsonPropertyOrder({
  GetContract200ResponseAllOfCompilation.JSON_PROPERTY_LANGUAGE,
  GetContract200ResponseAllOfCompilation.JSON_PROPERTY_COMPILER,
  GetContract200ResponseAllOfCompilation.JSON_PROPERTY_COMPILER_VERSION,
  GetContract200ResponseAllOfCompilation.JSON_PROPERTY_COMPILER_SETTINGS,
  GetContract200ResponseAllOfCompilation.JSON_PROPERTY_NAME,
  GetContract200ResponseAllOfCompilation.JSON_PROPERTY_FULLY_QUALIFIED_NAME
})
@JsonTypeName("get_contract_200_response_allOf_compilation")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-08T01:55:37.009934+03:00[Europe/Moscow]", comments = "Generator version: 7.7.0")
public class GetContract200ResponseAllOfCompilation {
  /**
   * Gets or Sets language
   */
  public enum LanguageEnum {
    SOLIDITY("Solidity"),
    
    VYPER("Vyper");

    private String value;

    LanguageEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum b : LanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_LANGUAGE = "language";
  private LanguageEnum language = LanguageEnum.SOLIDITY;

  public static final String JSON_PROPERTY_COMPILER = "compiler";
  private String compiler;

  public static final String JSON_PROPERTY_COMPILER_VERSION = "compilerVersion";
  private String compilerVersion;

  public static final String JSON_PROPERTY_COMPILER_SETTINGS = "compilerSettings";
  private Object compilerSettings;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_FULLY_QUALIFIED_NAME = "fullyQualifiedName";
  private String fullyQualifiedName;

  public GetContract200ResponseAllOfCompilation() {
  }

  public GetContract200ResponseAllOfCompilation language(LanguageEnum language) {
    
    this.language = language;
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LanguageEnum getLanguage() {
    return language;
  }


  @JsonProperty(JSON_PROPERTY_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLanguage(LanguageEnum language) {
    this.language = language;
  }

  public GetContract200ResponseAllOfCompilation compiler(String compiler) {
    
    this.compiler = compiler;
    return this;
  }

  /**
   * Get compiler
   * @return compiler
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMPILER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCompiler() {
    return compiler;
  }


  @JsonProperty(JSON_PROPERTY_COMPILER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCompiler(String compiler) {
    this.compiler = compiler;
  }

  public GetContract200ResponseAllOfCompilation compilerVersion(String compilerVersion) {
    
    this.compilerVersion = compilerVersion;
    return this;
  }

  /**
   * Get compilerVersion
   * @return compilerVersion
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMPILER_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCompilerVersion() {
    return compilerVersion;
  }


  @JsonProperty(JSON_PROPERTY_COMPILER_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCompilerVersion(String compilerVersion) {
    this.compilerVersion = compilerVersion;
  }

  public GetContract200ResponseAllOfCompilation compilerSettings(Object compilerSettings) {
    
    this.compilerSettings = compilerSettings;
    return this;
  }

  /**
   * Get compilerSettings
   * @return compilerSettings
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMPILER_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getCompilerSettings() {
    return compilerSettings;
  }


  @JsonProperty(JSON_PROPERTY_COMPILER_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCompilerSettings(Object compilerSettings) {
    this.compilerSettings = compilerSettings;
  }

  public GetContract200ResponseAllOfCompilation name(String name) {
    
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }

  public GetContract200ResponseAllOfCompilation fullyQualifiedName(String fullyQualifiedName) {
    
    this.fullyQualifiedName = fullyQualifiedName;
    return this;
  }

  /**
   * Get fullyQualifiedName
   * @return fullyQualifiedName
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FULLY_QUALIFIED_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFullyQualifiedName() {
    return fullyQualifiedName;
  }


  @JsonProperty(JSON_PROPERTY_FULLY_QUALIFIED_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFullyQualifiedName(String fullyQualifiedName) {
    this.fullyQualifiedName = fullyQualifiedName;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetContract200ResponseAllOfCompilation getContract200ResponseAllOfCompilation = (GetContract200ResponseAllOfCompilation) o;
    return Objects.equals(this.language, getContract200ResponseAllOfCompilation.language) &&
        Objects.equals(this.compiler, getContract200ResponseAllOfCompilation.compiler) &&
        Objects.equals(this.compilerVersion, getContract200ResponseAllOfCompilation.compilerVersion) &&
        Objects.equals(this.compilerSettings, getContract200ResponseAllOfCompilation.compilerSettings) &&
        Objects.equals(this.name, getContract200ResponseAllOfCompilation.name) &&
        Objects.equals(this.fullyQualifiedName, getContract200ResponseAllOfCompilation.fullyQualifiedName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(language, compiler, compilerVersion, compilerSettings, name, fullyQualifiedName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetContract200ResponseAllOfCompilation {\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    compiler: ").append(toIndentedString(compiler)).append("\n");
    sb.append("    compilerVersion: ").append(toIndentedString(compilerVersion)).append("\n");
    sb.append("    compilerSettings: ").append(toIndentedString(compilerSettings)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    fullyQualifiedName: ").append(toIndentedString(fullyQualifiedName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

