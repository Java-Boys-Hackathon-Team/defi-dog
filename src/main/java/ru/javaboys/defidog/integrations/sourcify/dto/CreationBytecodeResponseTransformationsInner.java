/*
 * Sourcify APIv2
 * Welcome to the Sourcify's APIv2.  Important differences between the deprecated legacy API and the new APIv2: - **Ticketing**: The verfication requests resolve into tickets/verification jobs.    - Previously the verification happened during the HTTP request, which resulted in timeouts if compilation took longer - **Standard JSON as default**: In the current design we take the standard JSON format as our main verification endpoint. We still support verification with metadata at `/v2/verify/metadata`. - **Lean API**: We keep the number of endpoints minimal compared to v1. We won't have a session API.  - **Detailed contract response**: Prev. we only returned contract files of a contract. Now we can return details at `/contract/{chainId}/{address}`.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@sourcify.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.javaboys.defidog.integrations.sourcify.dto;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

import java.util.Objects;

/**
 * CreationBytecodeResponseTransformationsInner
 */
@JsonPropertyOrder({
  CreationBytecodeResponseTransformationsInner.JSON_PROPERTY_ID,
  CreationBytecodeResponseTransformationsInner.JSON_PROPERTY_TYPE,
  CreationBytecodeResponseTransformationsInner.JSON_PROPERTY_OFFSET,
  CreationBytecodeResponseTransformationsInner.JSON_PROPERTY_REASON
})
@JsonTypeName("CreationBytecodeResponse_transformations_inner")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-08T01:55:37.009934+03:00[Europe/Moscow]", comments = "Generator version: 7.7.0")
public class CreationBytecodeResponseTransformationsInner {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  /**
   * &#x60;insert&#x60; when the transformation value is appended to the bytecode e.g. constructor arguments
   */
  public enum TypeEnum {
    REPLACE("replace"),
    
    INSERT("insert");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_OFFSET = "offset";
  private Integer offset;

  /**
   * Keep in mind the &#x60;library&#x60; reason is singular here but plural in the TransformationValues dictionary: &#x60;libraries&#x60;
   */
  public enum ReasonEnum {
    CBOR_AUXDATA("cborAuxdata"),
    
    LIBRARY("library"),
    
    CONSTRUCTOR_ARGUMENTS("constructorArguments");

    private String value;

    ReasonEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ReasonEnum fromValue(String value) {
      for (ReasonEnum b : ReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_REASON = "reason";
  private ReasonEnum reason;

  public CreationBytecodeResponseTransformationsInner() {
  }

  public CreationBytecodeResponseTransformationsInner id(String id) {
    
    this.id = id;
    return this;
  }

  /**
   * Does not exist on &#x60;constructorArguments&#x60;. Used to find the corresponding value of the Transformation in the TransformationValues dictionary
   * @return id
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }

  public CreationBytecodeResponseTransformationsInner type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

  /**
   * &#x60;insert&#x60; when the transformation value is appended to the bytecode e.g. constructor arguments
   * @return type
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }

  public CreationBytecodeResponseTransformationsInner offset(Integer offset) {
    
    this.offset = offset;
    return this;
  }

  /**
   * Get offset
   * @return offset
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OFFSET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getOffset() {
    return offset;
  }


  @JsonProperty(JSON_PROPERTY_OFFSET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOffset(Integer offset) {
    this.offset = offset;
  }

  public CreationBytecodeResponseTransformationsInner reason(ReasonEnum reason) {
    
    this.reason = reason;
    return this;
  }

  /**
   * Keep in mind the &#x60;library&#x60; reason is singular here but plural in the TransformationValues dictionary: &#x60;libraries&#x60;
   * @return reason
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REASON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ReasonEnum getReason() {
    return reason;
  }


  @JsonProperty(JSON_PROPERTY_REASON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReason(ReasonEnum reason) {
    this.reason = reason;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreationBytecodeResponseTransformationsInner creationBytecodeResponseTransformationsInner = (CreationBytecodeResponseTransformationsInner) o;
    return Objects.equals(this.id, creationBytecodeResponseTransformationsInner.id) &&
        Objects.equals(this.type, creationBytecodeResponseTransformationsInner.type) &&
        Objects.equals(this.offset, creationBytecodeResponseTransformationsInner.offset) &&
        Objects.equals(this.reason, creationBytecodeResponseTransformationsInner.reason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, offset, reason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreationBytecodeResponseTransformationsInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

