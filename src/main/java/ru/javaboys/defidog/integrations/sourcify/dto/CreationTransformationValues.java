/*
 * Sourcify APIv2
 * Welcome to the Sourcify's APIv2.  Important differences between the deprecated legacy API and the new APIv2: - **Ticketing**: The verfication requests resolve into tickets/verification jobs.    - Previously the verification happened during the HTTP request, which resulted in timeouts if compilation took longer - **Standard JSON as default**: In the current design we take the standard JSON format as our main verification endpoint. We still support verification with metadata at `/v2/verify/metadata`. - **Lean API**: We keep the number of endpoints minimal compared to v1. We won't have a session API.  - **Detailed contract response**: Prev. we only returned contract files of a contract. Now we can return details at `/contract/{chainId}/{address}`.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@sourcify.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.javaboys.defidog.integrations.sourcify.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * CreationTransformationValues
 */
@JsonPropertyOrder({
  CreationTransformationValues.JSON_PROPERTY_LIBRARIES,
  CreationTransformationValues.JSON_PROPERTY_CONSTRUCTOR_ARGUMENTS,
  CreationTransformationValues.JSON_PROPERTY_CBOR_AUXDATA
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-08T01:55:37.009934+03:00[Europe/Moscow]", comments = "Generator version: 7.7.0")
public class CreationTransformationValues {
  public static final String JSON_PROPERTY_LIBRARIES = "libraries";
  private Map<String, String> libraries = new HashMap<>();

  public static final String JSON_PROPERTY_CONSTRUCTOR_ARGUMENTS = "constructorArguments";
  private String constructorArguments;

  public static final String JSON_PROPERTY_CBOR_AUXDATA = "cborAuxdata";
  private Map<String, String> cborAuxdata = new HashMap<>();

  public CreationTransformationValues() {
  }

  public CreationTransformationValues libraries(Map<String, String> libraries) {
    
    this.libraries = libraries;
    return this;
  }

  public CreationTransformationValues putLibrariesItem(String key, String librariesItem) {
    if (this.libraries == null) {
      this.libraries = new HashMap<>();
    }
    this.libraries.put(key, librariesItem);
    return this;
  }

  /**
   * Get libraries
   * @return libraries
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIBRARIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getLibraries() {
    return libraries;
  }


  @JsonProperty(JSON_PROPERTY_LIBRARIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLibraries(Map<String, String> libraries) {
    this.libraries = libraries;
  }

  public CreationTransformationValues constructorArguments(String constructorArguments) {
    
    this.constructorArguments = constructorArguments;
    return this;
  }

  /**
   * Get constructorArguments
   * @return constructorArguments
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONSTRUCTOR_ARGUMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getConstructorArguments() {
    return constructorArguments;
  }


  @JsonProperty(JSON_PROPERTY_CONSTRUCTOR_ARGUMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConstructorArguments(String constructorArguments) {
    this.constructorArguments = constructorArguments;
  }

  public CreationTransformationValues cborAuxdata(Map<String, String> cborAuxdata) {
    
    this.cborAuxdata = cborAuxdata;
    return this;
  }

  public CreationTransformationValues putCborAuxdataItem(String key, String cborAuxdataItem) {
    if (this.cborAuxdata == null) {
      this.cborAuxdata = new HashMap<>();
    }
    this.cborAuxdata.put(key, cborAuxdataItem);
    return this;
  }

  /**
   * Different format than the &#x60;cborAuxdata&#x60; field under the bytecode object.   Will be here only if there was a transformation on the cborAuxdata. If cborAuxdatas matched, there won&#39;t be a transformation.
   * @return cborAuxdata
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CBOR_AUXDATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getCborAuxdata() {
    return cborAuxdata;
  }


  @JsonProperty(JSON_PROPERTY_CBOR_AUXDATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCborAuxdata(Map<String, String> cborAuxdata) {
    this.cborAuxdata = cborAuxdata;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreationTransformationValues creationTransformationValues = (CreationTransformationValues) o;
    return Objects.equals(this.libraries, creationTransformationValues.libraries) &&
        Objects.equals(this.constructorArguments, creationTransformationValues.constructorArguments) &&
        Objects.equals(this.cborAuxdata, creationTransformationValues.cborAuxdata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(libraries, constructorArguments, cborAuxdata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreationTransformationValues {\n");
    sb.append("    libraries: ").append(toIndentedString(libraries)).append("\n");
    sb.append("    constructorArguments: ").append(toIndentedString(constructorArguments)).append("\n");
    sb.append("    cborAuxdata: ").append(toIndentedString(cborAuxdata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

