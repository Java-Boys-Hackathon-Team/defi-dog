/*
 * Sourcify APIv2
 * Welcome to the Sourcify's APIv2.  Important differences between the deprecated legacy API and the new APIv2: - **Ticketing**: The verfication requests resolve into tickets/verification jobs.    - Previously the verification happened during the HTTP request, which resulted in timeouts if compilation took longer - **Standard JSON as default**: In the current design we take the standard JSON format as our main verification endpoint. We still support verification with metadata at `/v2/verify/metadata`. - **Lean API**: We keep the number of endpoints minimal compared to v1. We won't have a session API.  - **Detailed contract response**: Prev. we only returned contract files of a contract. Now we can return details at `/contract/{chainId}/{address}`.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@sourcify.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.javaboys.defidog.integrations.sourcify.dto;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * The input fields conforming the compiler standard-JSON format.
 */
@JsonPropertyOrder({
  GetContract200ResponseAllOfStdJsonInput.JSON_PROPERTY_LANGUAGE,
  GetContract200ResponseAllOfStdJsonInput.JSON_PROPERTY_SOURCES,
  GetContract200ResponseAllOfStdJsonInput.JSON_PROPERTY_SETTINGS
})
@JsonTypeName("get_contract_200_response_allOf_stdJsonInput")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-08T01:55:37.009934+03:00[Europe/Moscow]", comments = "Generator version: 7.7.0")
public class GetContract200ResponseAllOfStdJsonInput {
  /**
   * Gets or Sets language
   */
  public enum LanguageEnum {
    SOLIDITY("Solidity"),
    
    VYPER("Vyper");

    private String value;

    LanguageEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum b : LanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_LANGUAGE = "language";
  private LanguageEnum language = LanguageEnum.SOLIDITY;

  public static final String JSON_PROPERTY_SOURCES = "sources";
  private Map<String, GetContract200ResponseAllOfStdJsonInputSourcesValue> sources = new HashMap<>();

  public static final String JSON_PROPERTY_SETTINGS = "settings";
  private Object settings;

  public GetContract200ResponseAllOfStdJsonInput() {
  }

  public GetContract200ResponseAllOfStdJsonInput language(LanguageEnum language) {
    
    this.language = language;
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LanguageEnum getLanguage() {
    return language;
  }


  @JsonProperty(JSON_PROPERTY_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLanguage(LanguageEnum language) {
    this.language = language;
  }

  public GetContract200ResponseAllOfStdJsonInput sources(Map<String, GetContract200ResponseAllOfStdJsonInputSourcesValue> sources) {
    
    this.sources = sources;
    return this;
  }

  public GetContract200ResponseAllOfStdJsonInput putSourcesItem(String key, GetContract200ResponseAllOfStdJsonInputSourcesValue sourcesItem) {
    if (this.sources == null) {
      this.sources = new HashMap<>();
    }
    this.sources.put(key, sourcesItem);
    return this;
  }

  /**
   * Get sources
   * @return sources
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, GetContract200ResponseAllOfStdJsonInputSourcesValue> getSources() {
    return sources;
  }


  @JsonProperty(JSON_PROPERTY_SOURCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSources(Map<String, GetContract200ResponseAllOfStdJsonInputSourcesValue> sources) {
    this.sources = sources;
  }

  public GetContract200ResponseAllOfStdJsonInput settings(Object settings) {
    
    this.settings = settings;
    return this;
  }

  /**
   * Get settings
   * @return settings
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getSettings() {
    return settings;
  }


  @JsonProperty(JSON_PROPERTY_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSettings(Object settings) {
    this.settings = settings;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetContract200ResponseAllOfStdJsonInput getContract200ResponseAllOfStdJsonInput = (GetContract200ResponseAllOfStdJsonInput) o;
    return Objects.equals(this.language, getContract200ResponseAllOfStdJsonInput.language) &&
        Objects.equals(this.sources, getContract200ResponseAllOfStdJsonInput.sources) &&
        Objects.equals(this.settings, getContract200ResponseAllOfStdJsonInput.settings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(language, sources, settings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetContract200ResponseAllOfStdJsonInput {\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

