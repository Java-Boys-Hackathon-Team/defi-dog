/*
 * Sourcify APIv2
 * Welcome to the Sourcify's APIv2.  Important differences between the deprecated legacy API and the new APIv2: - **Ticketing**: The verfication requests resolve into tickets/verification jobs.    - Previously the verification happened during the HTTP request, which resulted in timeouts if compilation took longer - **Standard JSON as default**: In the current design we take the standard JSON format as our main verification endpoint. We still support verification with metadata at `/v2/verify/metadata`. - **Lean API**: We keep the number of endpoints minimal compared to v1. We won't have a session API.  - **Detailed contract response**: Prev. we only returned contract files of a contract. Now we can return details at `/contract/{chainId}/{address}`.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@sourcify.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.javaboys.defidog.integrations.sourcify.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * The outputs conforming the compiler standard JSON format
 */
@JsonPropertyOrder({
  GetContract200ResponseAllOfStdJsonOutput.JSON_PROPERTY_SOURCES,
  GetContract200ResponseAllOfStdJsonOutput.JSON_PROPERTY_CONTRACTS
})
@JsonTypeName("get_contract_200_response_allOf_stdJsonOutput")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-08T01:55:37.009934+03:00[Europe/Moscow]", comments = "Generator version: 7.7.0")
public class GetContract200ResponseAllOfStdJsonOutput {
  public static final String JSON_PROPERTY_SOURCES = "sources";
  private Map<String, GetContract200ResponseAllOfSourceIdsValue> sources = new HashMap<>();

  public static final String JSON_PROPERTY_CONTRACTS = "contracts";
  private Map<String, Map<String, GetContract200ResponseAllOfStdJsonOutputContractsValueValue>> contracts = new HashMap<>();

  public GetContract200ResponseAllOfStdJsonOutput() {
  }

  public GetContract200ResponseAllOfStdJsonOutput sources(Map<String, GetContract200ResponseAllOfSourceIdsValue> sources) {
    
    this.sources = sources;
    return this;
  }

  public GetContract200ResponseAllOfStdJsonOutput putSourcesItem(String key, GetContract200ResponseAllOfSourceIdsValue sourcesItem) {
    if (this.sources == null) {
      this.sources = new HashMap<>();
    }
    this.sources.put(key, sourcesItem);
    return this;
  }

  /**
   * Get sources
   * @return sources
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, GetContract200ResponseAllOfSourceIdsValue> getSources() {
    return sources;
  }


  @JsonProperty(JSON_PROPERTY_SOURCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSources(Map<String, GetContract200ResponseAllOfSourceIdsValue> sources) {
    this.sources = sources;
  }

  public GetContract200ResponseAllOfStdJsonOutput contracts(Map<String, Map<String, GetContract200ResponseAllOfStdJsonOutputContractsValueValue>> contracts) {
    
    this.contracts = contracts;
    return this;
  }

  public GetContract200ResponseAllOfStdJsonOutput putContractsItem(String key, Map<String, GetContract200ResponseAllOfStdJsonOutputContractsValueValue> contractsItem) {
    if (this.contracts == null) {
      this.contracts = new HashMap<>();
    }
    this.contracts.put(key, contractsItem);
    return this;
  }

  /**
   * Contracts output in the standard JSON format.  This will only contain the entry for the compilaton target contract, even if the &#x60;outputSelection&#x60; was &#x60;*&#x60;.
   * @return contracts
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTRACTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Map<String, GetContract200ResponseAllOfStdJsonOutputContractsValueValue>> getContracts() {
    return contracts;
  }


  @JsonProperty(JSON_PROPERTY_CONTRACTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContracts(Map<String, Map<String, GetContract200ResponseAllOfStdJsonOutputContractsValueValue>> contracts) {
    this.contracts = contracts;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetContract200ResponseAllOfStdJsonOutput getContract200ResponseAllOfStdJsonOutput = (GetContract200ResponseAllOfStdJsonOutput) o;
    return Objects.equals(this.sources, getContract200ResponseAllOfStdJsonOutput.sources) &&
        Objects.equals(this.contracts, getContract200ResponseAllOfStdJsonOutput.contracts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sources, contracts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetContract200ResponseAllOfStdJsonOutput {\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    contracts: ").append(toIndentedString(contracts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

