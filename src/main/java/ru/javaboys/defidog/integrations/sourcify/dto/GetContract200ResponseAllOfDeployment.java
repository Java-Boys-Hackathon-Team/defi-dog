/*
 * Sourcify APIv2
 * Welcome to the Sourcify's APIv2.  Important differences between the deprecated legacy API and the new APIv2: - **Ticketing**: The verfication requests resolve into tickets/verification jobs.    - Previously the verification happened during the HTTP request, which resulted in timeouts if compilation took longer - **Standard JSON as default**: In the current design we take the standard JSON format as our main verification endpoint. We still support verification with metadata at `/v2/verify/metadata`. - **Lean API**: We keep the number of endpoints minimal compared to v1. We won't have a session API.  - **Detailed contract response**: Prev. we only returned contract files of a contract. Now we can return details at `/contract/{chainId}/{address}`.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@sourcify.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ru.javaboys.defidog.integrations.sourcify.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

import java.util.Objects;

/**
 * GetContract200ResponseAllOfDeployment
 */
@JsonPropertyOrder({
  GetContract200ResponseAllOfDeployment.JSON_PROPERTY_TRANSACTION_HASH,
  GetContract200ResponseAllOfDeployment.JSON_PROPERTY_BLOCK_NUMBER,
  GetContract200ResponseAllOfDeployment.JSON_PROPERTY_TRANSACTION_INDEX,
  GetContract200ResponseAllOfDeployment.JSON_PROPERTY_DEPLOYER
})
@JsonTypeName("get_contract_200_response_allOf_deployment")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-08T01:55:37.009934+03:00[Europe/Moscow]", comments = "Generator version: 7.7.0")
public class GetContract200ResponseAllOfDeployment {
  public static final String JSON_PROPERTY_TRANSACTION_HASH = "transactionHash";
  private String transactionHash;

  public static final String JSON_PROPERTY_BLOCK_NUMBER = "blockNumber";
  private String blockNumber;

  public static final String JSON_PROPERTY_TRANSACTION_INDEX = "transactionIndex";
  private String transactionIndex;

  public static final String JSON_PROPERTY_DEPLOYER = "deployer";
  private String deployer;

  public GetContract200ResponseAllOfDeployment() {
  }

  public GetContract200ResponseAllOfDeployment transactionHash(String transactionHash) {
    
    this.transactionHash = transactionHash;
    return this;
  }

  /**
   * Get transactionHash
   * @return transactionHash
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTION_HASH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTransactionHash() {
    return transactionHash;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_HASH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionHash(String transactionHash) {
    this.transactionHash = transactionHash;
  }

  public GetContract200ResponseAllOfDeployment blockNumber(String blockNumber) {
    
    this.blockNumber = blockNumber;
    return this;
  }

  /**
   * Get blockNumber
   * @return blockNumber
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BLOCK_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBlockNumber() {
    return blockNumber;
  }


  @JsonProperty(JSON_PROPERTY_BLOCK_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBlockNumber(String blockNumber) {
    this.blockNumber = blockNumber;
  }

  public GetContract200ResponseAllOfDeployment transactionIndex(String transactionIndex) {
    
    this.transactionIndex = transactionIndex;
    return this;
  }

  /**
   * Get transactionIndex
   * @return transactionIndex
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTION_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTransactionIndex() {
    return transactionIndex;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionIndex(String transactionIndex) {
    this.transactionIndex = transactionIndex;
  }

  public GetContract200ResponseAllOfDeployment deployer(String deployer) {
    
    this.deployer = deployer;
    return this;
  }

  /**
   * Contract Address in hex string. Can be checksummed or not (i.e. can contain capital letters)
   * @return deployer
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEPLOYER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDeployer() {
    return deployer;
  }


  @JsonProperty(JSON_PROPERTY_DEPLOYER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeployer(String deployer) {
    this.deployer = deployer;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetContract200ResponseAllOfDeployment getContract200ResponseAllOfDeployment = (GetContract200ResponseAllOfDeployment) o;
    return Objects.equals(this.transactionHash, getContract200ResponseAllOfDeployment.transactionHash) &&
        Objects.equals(this.blockNumber, getContract200ResponseAllOfDeployment.blockNumber) &&
        Objects.equals(this.transactionIndex, getContract200ResponseAllOfDeployment.transactionIndex) &&
        Objects.equals(this.deployer, getContract200ResponseAllOfDeployment.deployer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionHash, blockNumber, transactionIndex, deployer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetContract200ResponseAllOfDeployment {\n");
    sb.append("    transactionHash: ").append(toIndentedString(transactionHash)).append("\n");
    sb.append("    blockNumber: ").append(toIndentedString(blockNumber)).append("\n");
    sb.append("    transactionIndex: ").append(toIndentedString(transactionIndex)).append("\n");
    sb.append("    deployer: ").append(toIndentedString(deployer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

